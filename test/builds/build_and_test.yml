trigger: none

jobs:

- job: 'Ubuntu'
  workspace:
    clean: all
  pool:
    vmImage: 'ubuntu-18.04'

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'

  - task: UseDotNet@2
    inputs:
      version: 3.1.100

  - script: dotnet run --project src/f2k/f2k.fsproj SKIPPED obj/test/out.ks test/f2k/test0.fs
    env:
      # v Otherwise it wastes a bunch of time caching
      # See http://www.donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

  - script: sh ./test/builds/install_linux.sh || (sleep 30 && sh ./test/builds/install_linux.sh) || (sleep 30 && sh ./test/builds/install_linux.sh)
    displayName: 'Install dependencies'

  - script: /opt/cabal/3.0/bin/cabal v2-install --with-ghc /opt/ghc/8.6.5/bin/ghc-8.6.5 --installdir=build/bin  --overwrite-policy=always --install-method=copy
    displayName: 'Can build with cabal'

  - script: ./build/bin/ksc --test --fs-test obj/test/out.ks
    displayName: 'ksc test'

  - script: git clone https://github.com/pybind/pybind11.git && cd pybind11 && git checkout c9d32a81f40ad540015814edf13b29980c63e39c
    displayName: Cloning pybind11

  - script: sh ./test/builds/build_and_test_mnistcnn.sh . pybind11
    displayName: Testing MNIST CNN

  - script: sh ./test/builds/build_and_test_adbench_lstm.sh . pybind11
    displayName: Testing ADBench LSTM

  - script: sh ./test/builds/build_and_test_gmm.sh . pybind11
    displayName: Testing ADBench GMM

  - script: sh ./test/builds/test_pytest.sh
    displayName: Testing ksc python package

  - script: sh ./test/builds/test_resnet50.sh
    displayName: Testing Resnet50 through ksc

  - script: ./build/bin/ksc --profile --ks-file-without-extension test/ksc/run-gmm-obj-for-profiling --proffile prof-obj.out --proffunctions prof-obj-functions.txt --proflines prof-obj-lines.txt && ./build/bin/ksc --profile --ks-file-without-extension test/ksc/run-gmm-rev-for-profiling --proffile prof-rev.out  --proffunctions prof-rev-functions.txt --proflines prof-rev-lines.txt
    displayName: gperftools

  - script: sh test/builds/publish_artifact.sh

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: Artifact
      artifactName: Artifact
      targetPath: Artifact

  - script: |
      python -m pip install wheel twine
      pushd ./src/python/ && python setup.py bdist_wheel && popd
    displayName: Prepare for ksc python package publishing
  # Python twine upload authenticate V1
  - task: TwineAuthenticate@1
    displayName: 'Twine Authenticate'
    inputs:
      artifactFeed: Knossos/Knossos # <Project Name>/<Feed Name>
  - script: |
      python -m twine upload -r "Knossos" --skip-existing --config-file $(PYPIRC_PATH) ./src/python/dist/*.whl --verbose
    displayName: Publishing ksc python package

  - script: rm -rf *
    displayName: 'Clean'


- job: 'Windows'
  workspace:
    clean: all
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - task: UseDotNet@2
    inputs:
      version: 3.1.100

  - script: dotnet run --project .\src\f2k\f2k.fsproj SKIPPED obj/test/out.ks .\test\f2k\test0.fs
    env:
      # v Otherwise it wastes a bunch of time caching
      # See http://www.donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

  - script: call test\builds\install_windows.bat || sleep 30 && call test\builds\install_windows.bat || sleep 30 && call test\builds\install_windows.bat
    displayName: 'Install dependencies'

  - script: refreshenv && ghc -main-is testWindows -isrc/ksc -Werror -Wunused-imports -Wunused-top-binds -Wmissing-signatures src/ksc/Main.hs
    displayName: 'GHC compile src/ksc/Main.hs'

  - script: src\ksc\Main.exe obj/test/out.ks
    displayName: 'ksc test'

  - script: rm -rf *
    displayName: 'Clean'
