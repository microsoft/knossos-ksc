;; AUTOGENERATED FROM obj/hf-bert-to-onnx/bert2.onnx
(def torch-jit-export
     None
     ((input_ids : (Vec Integer)) (attention_mask : (Vec Integer)) (token_type_ids : (Vec Integer)))
  (let (%321 (vec 0))
  (let (%322 (vec 1))
  (let (%323 2.0)
  (let (%324 (load-from-onnx-float32 768 768 "%324"))
  (let (%325 (load-from-onnx-float32 768 768 "%325"))
  (let (%326 (load-from-onnx-float32 768 768 "%326"))
  (let (%327 (vec 12))
  (let (%328 (vec 64))
  (let (%329 (vec 12))
  (let (%330 (vec 64))
  (let (%331 (vec 12))
  (let (%332 (vec 64))
  (let (%333 (vec 768))
  (let (%334 (load-from-onnx-float32 768 768 "%334"))
  (let (%335 2.0)
  (let (%336 (load-from-onnx-float32 768 3072 "%336"))
  (let (%337 (load-from-onnx-float32 3072 768 "%337"))
  (let (%338 2.0)
  (let (%339 (load-from-onnx-float32 768 768 "%339"))
  (let (%340 (load-from-onnx-float32 768 768 "%340"))
  (let (%341 (load-from-onnx-float32 768 768 "%341"))
  (let (%342 (vec 12))
  (let (%343 (vec 64))
  (let (%344 (vec 12))
  (let (%345 (vec 64))
  (let (%346 (vec 12))
  (let (%347 (vec 64))
  (let (%348 (vec 768))
  (let (%349 (load-from-onnx-float32 768 768 "%349"))
  (let (%350 2.0)
  (let (%351 (load-from-onnx-float32 768 3072 "%351"))
  (let (%352 (load-from-onnx-float32 3072 768 "%352"))
  (let (%353 2.0)
  (let (%354 (load-from-onnx-float32 768 2 "%354"))
  (let (bert.embeddings.LayerNorm.bias (load-from-onnx-float32 768 "bert.embeddings.LayerNorm.bias"))
  (let (bert.embeddings.LayerNorm.weight (load-from-onnx-float32 768 "bert.embeddings.LayerNorm.weight"))
  (let (bert.embeddings.position_embeddings.weight (load-from-onnx-float32 512 768 "bert.embeddings.position_embeddings.weight"))
  (let (bert.embeddings.position_ids (load-from-onnx-int64 1 512 "bert.embeddings.position_ids"))
  (let (bert.embeddings.token_type_embeddings.weight (load-from-onnx-float32 2 768 "bert.embeddings.token_type_embeddings.weight"))
  (let (bert.embeddings.word_embeddings.weight (load-from-onnx-float32 30522 768 "bert.embeddings.word_embeddings.weight"))
  (let (bert.encoder.layer.0.attention.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.output.LayerNorm.bias"))
  (let (bert.encoder.layer.0.attention.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.output.LayerNorm.weight"))
  (let (bert.encoder.layer.0.attention.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.output.dense.bias"))
  (let (bert.encoder.layer.0.attention.self.key.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.self.key.bias"))
  (let (bert.encoder.layer.0.attention.self.query.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.self.query.bias"))
  (let (bert.encoder.layer.0.attention.self.value.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.self.value.bias"))
  (let (bert.encoder.layer.0.intermediate.dense.bias (load-from-onnx-float32 3072 "bert.encoder.layer.0.intermediate.dense.bias"))
  (let (bert.encoder.layer.0.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.output.LayerNorm.bias"))
  (let (bert.encoder.layer.0.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.0.output.LayerNorm.weight"))
  (let (bert.encoder.layer.0.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.output.dense.bias"))
  (let (bert.encoder.layer.1.attention.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.output.LayerNorm.bias"))
  (let (bert.encoder.layer.1.attention.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.output.LayerNorm.weight"))
  (let (bert.encoder.layer.1.attention.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.output.dense.bias"))
  (let (bert.encoder.layer.1.attention.self.key.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.self.key.bias"))
  (let (bert.encoder.layer.1.attention.self.query.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.self.query.bias"))
  (let (bert.encoder.layer.1.attention.self.value.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.self.value.bias"))
  (let (bert.encoder.layer.1.intermediate.dense.bias (load-from-onnx-float32 3072 "bert.encoder.layer.1.intermediate.dense.bias"))
  (let (bert.encoder.layer.1.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.output.LayerNorm.bias"))
  (let (bert.encoder.layer.1.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.1.output.LayerNorm.weight"))
  (let (bert.encoder.layer.1.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.output.dense.bias"))
  (let (qa_outputs.bias (vec 0.0 0.0))
  (let ($beg_of_internal_inits #|Begin of internal initializers|#  99999)
  (let ($end_of_inits #|End of initializers|#  99999)
  (let (%43 (Unsqueeze attention_mask (vec 1)))
  (let (%44 (Unsqueeze %43 (vec 2)))
  (let (%45 (Cast_FLOAT %44))
  (let (%46 (Constant 1.0))
  (let (%47 (Sub %46 %45))
  (let (%48 (Constant -10000.0))
  (let (%49 (Mul %47 %48))
  (let (%50 (Shape input_ids))
  (let (%51 (Constant 1))
  (let (%52 (Gather %50 %51 0))
  (let (%56 (Unsqueeze %52 (vec 0)))
  (let (%58 (Constant (vec 1)))
  (let (%59 (Slice bert.embeddings.position_ids %321 %56 %322 %58))
  (let (%60 (Gather bert.embeddings.word_embeddings.weight input_ids 0))
  (let (%61 (Gather bert.embeddings.position_embeddings.weight %59 0))
  (let (%62 (Gather bert.embeddings.token_type_embeddings.weight token_type_ids 0))
  (let (%63 (Add %60 %61))
  (let (%64 (Add %63 %62))
  (let (%66 (ReduceMean %64 (vec -1) 1))
  (let (%67 (Sub %64 %66))
  (let (%68 (Cast_FLOAT %67))
  (let (%70 (Pow %68 %323))
  (let (%71 (ReduceMean %70 (vec -1) 1))
  (let (%72 (Constant 9.999999960041972e-13))
  (let (%73 (Add %71 %72))
  (let (%74 (Sqrt %73))
  (let (%75 (Div %67 %74))
  (let (%76 (Mul %75 bert.embeddings.LayerNorm.weight))
  (let (%77 (Add %76 bert.embeddings.LayerNorm.bias))
  (let (%79 (MatMul %77 %324))
  (let (%80 (Add %79 bert.encoder.layer.0.attention.self.query.bias))
  (let (%82 (MatMul %77 %325))
  (let (%83 (Add %82 bert.encoder.layer.0.attention.self.key.bias))
  (let (%85 (MatMul %77 %326))
  (let (%86 (Add %85 bert.encoder.layer.0.attention.self.value.bias))
  (let (%87 (Shape %80))
  (let (%88 (Constant 0))
  (let (%89 (Gather %87 %88 0))
  (let (%90 (Shape %80))
  (let (%91 (Constant 1))
  (let (%92 (Gather %90 %91 0))
  (let (%95 (Unsqueeze %89 (vec 0)))
  (let (%96 (Unsqueeze %92 (vec 0)))
  (let (%99 (Concat %95 %96 %327 %328 0))
  (let (%100 (Reshape %80 %99))
  (let (%101 (Transpose %100 (vec 0 2 1 3)))
  (let (%102 (Shape %83))
  (let (%103 (Constant 0))
  (let (%104 (Gather %102 %103 0))
  (let (%105 (Shape %83))
  (let (%106 (Constant 1))
  (let (%107 (Gather %105 %106 0))
  (let (%110 (Unsqueeze %104 (vec 0)))
  (let (%111 (Unsqueeze %107 (vec 0)))
  (let (%114 (Concat %110 %111 %329 %330 0))
  (let (%115 (Reshape %83 %114))
  (let (%116 (Shape %86))
  (let (%117 (Constant 0))
  (let (%118 (Gather %116 %117 0))
  (let (%119 (Shape %86))
  (let (%120 (Constant 1))
  (let (%121 (Gather %119 %120 0))
  (let (%124 (Unsqueeze %118 (vec 0)))
  (let (%125 (Unsqueeze %121 (vec 0)))
  (let (%128 (Concat %124 %125 %331 %332 0))
  (let (%129 (Reshape %86 %128))
  (let (%130 (Transpose %129 (vec 0 2 1 3)))
  (let (%131 (Transpose %115 (vec 0 2 3 1)))
  (let (%132 (MatMul %101 %131))
  (let (%133 (Constant 8.0))
  (let (%134 (Div %132 %133))
  (let (%135 (Add %134 %49))
  (let (%136 (Softmax %135 3))
  (let (%137 (MatMul %136 %130))
  (let (%138 (Transpose %137 (vec 0 2 1 3)))
  (let (%139 (Shape %138))
  (let (%140 (Constant 0))
  (let (%141 (Gather %139 %140 0))
  (let (%142 (Shape %138))
  (let (%143 (Constant 1))
  (let (%144 (Gather %142 %143 0))
  (let (%146 (Unsqueeze %141 (vec 0)))
  (let (%147 (Unsqueeze %144 (vec 0)))
  (let (%149 (Concat %146 %147 %333 0))
  (let (%150 (Reshape %138 %149))
  (let (%152 (MatMul %150 %334))
  (let (%153 (Add %152 bert.encoder.layer.0.attention.output.dense.bias))
  (let (%154 (Add %153 %77))
  (let (%156 (ReduceMean %154 (vec -1) 1))
  (let (%157 (Sub %154 %156))
  (let (%158 (Cast_FLOAT %157))
  (let (%160 (Pow %158 %335))
  (let (%161 (ReduceMean %160 (vec -1) 1))
  (let (%162 (Constant 9.999999960041972e-13))
  (let (%163 (Add %161 %162))
  (let (%164 (Sqrt %163))
  (let (%165 (Div %157 %164))
  (let (%166 (Mul %165 bert.encoder.layer.0.attention.output.LayerNorm.weight))
  (let (%167 (Add %166 bert.encoder.layer.0.attention.output.LayerNorm.bias))
  (let (%169 (MatMul %167 %336))
  (let (%170 (Add %169 bert.encoder.layer.0.intermediate.dense.bias))
  (let (%171 (Constant 1.4142135381698608))
  (let (%172 (Div %170 %171))
  (let (%173 (Erf %172))
  (let (%174 (Constant 1.0))
  (let (%175 (Add %173 %174))
  (let (%176 (Mul %170 %175))
  (let (%177 (Constant 0.5))
  (let (%178 (Mul %176 %177))
  (let (%180 (MatMul %178 %337))
  (let (%181 (Add %180 bert.encoder.layer.0.output.dense.bias))
  (let (%182 (Add %181 %167))
  (let (%184 (ReduceMean %182 (vec -1) 1))
  (let (%185 (Sub %182 %184))
  (let (%186 (Cast_FLOAT %185))
  (let (%188 (Pow %186 %338))
  (let (%189 (ReduceMean %188 (vec -1) 1))
  (let (%190 (Constant 9.999999960041972e-13))
  (let (%191 (Add %189 %190))
  (let (%192 (Sqrt %191))
  (let (%193 (Div %185 %192))
  (let (%194 (Mul %193 bert.encoder.layer.0.output.LayerNorm.weight))
  (let (%195 (Add %194 bert.encoder.layer.0.output.LayerNorm.bias))
  (let (%197 (MatMul %195 %339))
  (let (%198 (Add %197 bert.encoder.layer.1.attention.self.query.bias))
  (let (%200 (MatMul %195 %340))
  (let (%201 (Add %200 bert.encoder.layer.1.attention.self.key.bias))
  (let (%203 (MatMul %195 %341))
  (let (%204 (Add %203 bert.encoder.layer.1.attention.self.value.bias))
  (let (%205 (Shape %198))
  (let (%206 (Constant 0))
  (let (%207 (Gather %205 %206 0))
  (let (%208 (Shape %198))
  (let (%209 (Constant 1))
  (let (%210 (Gather %208 %209 0))
  (let (%213 (Unsqueeze %207 (vec 0)))
  (let (%214 (Unsqueeze %210 (vec 0)))
  (let (%217 (Concat %213 %214 %342 %343 0))
  (let (%218 (Reshape %198 %217))
  (let (%219 (Transpose %218 (vec 0 2 1 3)))
  (let (%220 (Shape %201))
  (let (%221 (Constant 0))
  (let (%222 (Gather %220 %221 0))
  (let (%223 (Shape %201))
  (let (%224 (Constant 1))
  (let (%225 (Gather %223 %224 0))
  (let (%228 (Unsqueeze %222 (vec 0)))
  (let (%229 (Unsqueeze %225 (vec 0)))
  (let (%232 (Concat %228 %229 %344 %345 0))
  (let (%233 (Reshape %201 %232))
  (let (%234 (Shape %204))
  (let (%235 (Constant 0))
  (let (%236 (Gather %234 %235 0))
  (let (%237 (Shape %204))
  (let (%238 (Constant 1))
  (let (%239 (Gather %237 %238 0))
  (let (%242 (Unsqueeze %236 (vec 0)))
  (let (%243 (Unsqueeze %239 (vec 0)))
  (let (%246 (Concat %242 %243 %346 %347 0))
  (let (%247 (Reshape %204 %246))
  (let (%248 (Transpose %247 (vec 0 2 1 3)))
  (let (%249 (Transpose %233 (vec 0 2 3 1)))
  (let (%250 (MatMul %219 %249))
  (let (%251 (Constant 8.0))
  (let (%252 (Div %250 %251))
  (let (%253 (Add %252 %49))
  (let (%254 (Softmax %253 3))
  (let (%255 (MatMul %254 %248))
  (let (%256 (Transpose %255 (vec 0 2 1 3)))
  (let (%257 (Shape %256))
  (let (%258 (Constant 0))
  (let (%259 (Gather %257 %258 0))
  (let (%260 (Shape %256))
  (let (%261 (Constant 1))
  (let (%262 (Gather %260 %261 0))
  (let (%264 (Unsqueeze %259 (vec 0)))
  (let (%265 (Unsqueeze %262 (vec 0)))
  (let (%267 (Concat %264 %265 %348 0))
  (let (%268 (Reshape %256 %267))
  (let (%270 (MatMul %268 %349))
  (let (%271 (Add %270 bert.encoder.layer.1.attention.output.dense.bias))
  (let (%272 (Add %271 %195))
  (let (%274 (ReduceMean %272 (vec -1) 1))
  (let (%275 (Sub %272 %274))
  (let (%276 (Cast_FLOAT %275))
  (let (%278 (Pow %276 %350))
  (let (%279 (ReduceMean %278 (vec -1) 1))
  (let (%280 (Constant 9.999999960041972e-13))
  (let (%281 (Add %279 %280))
  (let (%282 (Sqrt %281))
  (let (%283 (Div %275 %282))
  (let (%284 (Mul %283 bert.encoder.layer.1.attention.output.LayerNorm.weight))
  (let (%285 (Add %284 bert.encoder.layer.1.attention.output.LayerNorm.bias))
  (let (%287 (MatMul %285 %351))
  (let (%288 (Add %287 bert.encoder.layer.1.intermediate.dense.bias))
  (let (%289 (Constant 1.4142135381698608))
  (let (%290 (Div %288 %289))
  (let (%291 (Erf %290))
  (let (%292 (Constant 1.0))
  (let (%293 (Add %291 %292))
  (let (%294 (Mul %288 %293))
  (let (%295 (Constant 0.5))
  (let (%296 (Mul %294 %295))
  (let (%298 (MatMul %296 %352))
  (let (%299 (Add %298 bert.encoder.layer.1.output.dense.bias))
  (let (%300 (Add %299 %285))
  (let (%302 (ReduceMean %300 (vec -1) 1))
  (let (%303 (Sub %300 %302))
  (let (%304 (Cast_FLOAT %303))
  (let (%306 (Pow %304 %353))
  (let (%307 (ReduceMean %306 (vec -1) 1))
  (let (%308 (Constant 9.999999960041972e-13))
  (let (%309 (Add %307 %308))
  (let (%310 (Sqrt %309))
  (let (%311 (Div %303 %310))
  (let (%312 (Mul %311 bert.encoder.layer.1.output.LayerNorm.weight))
  (let (%313 (Add %312 bert.encoder.layer.1.output.LayerNorm.bias))
  (let (%315 (MatMul %313 %354))
  (let (%316 (Add %315 qa_outputs.bias))
  (let ((%317 %318) (Split %316 (vec 1 1) -1))
  (let (output_0 (Squeeze %317 (vec -1)))
  (let (output_1 (Squeeze %318 (vec -1)))
  output_1))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(def main None ((input_ids : (Vec Integer)) (attention_mask : (Vec Integer)) (token_type_ids : (Vec Integer)))
  (torch-jit-export input_ids attention_mask token_type_ids))

