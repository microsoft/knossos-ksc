;; AUTOGENERATED FROM obj/hf-bert-to-onnx/bert4.onnx
(def torch-jit-export
     None
     ((input_ids : (Vec Integer)) (attention_mask : (Vec Integer)) (token_type_ids : (Vec Integer)))
  (let (%589 (vec 0))
  (let (%590 (vec 1))
  (let (%591 2.0)
  (let (%592 (load-from-onnx-float32 768 768 "%592"))
  (let (%593 (load-from-onnx-float32 768 768 "%593"))
  (let (%594 (load-from-onnx-float32 768 768 "%594"))
  (let (%595 (vec 12))
  (let (%596 (vec 64))
  (let (%597 (vec 12))
  (let (%598 (vec 64))
  (let (%599 (vec 12))
  (let (%600 (vec 64))
  (let (%601 (vec 768))
  (let (%602 (load-from-onnx-float32 768 768 "%602"))
  (let (%603 2.0)
  (let (%604 (load-from-onnx-float32 768 3072 "%604"))
  (let (%605 (load-from-onnx-float32 3072 768 "%605"))
  (let (%606 2.0)
  (let (%607 (load-from-onnx-float32 768 768 "%607"))
  (let (%608 (load-from-onnx-float32 768 768 "%608"))
  (let (%609 (load-from-onnx-float32 768 768 "%609"))
  (let (%610 (vec 12))
  (let (%611 (vec 64))
  (let (%612 (vec 12))
  (let (%613 (vec 64))
  (let (%614 (vec 12))
  (let (%615 (vec 64))
  (let (%616 (vec 768))
  (let (%617 (load-from-onnx-float32 768 768 "%617"))
  (let (%618 2.0)
  (let (%619 (load-from-onnx-float32 768 3072 "%619"))
  (let (%620 (load-from-onnx-float32 3072 768 "%620"))
  (let (%621 2.0)
  (let (%622 (load-from-onnx-float32 768 768 "%622"))
  (let (%623 (load-from-onnx-float32 768 768 "%623"))
  (let (%624 (load-from-onnx-float32 768 768 "%624"))
  (let (%625 (vec 12))
  (let (%626 (vec 64))
  (let (%627 (vec 12))
  (let (%628 (vec 64))
  (let (%629 (vec 12))
  (let (%630 (vec 64))
  (let (%631 (vec 768))
  (let (%632 (load-from-onnx-float32 768 768 "%632"))
  (let (%633 2.0)
  (let (%634 (load-from-onnx-float32 768 3072 "%634"))
  (let (%635 (load-from-onnx-float32 3072 768 "%635"))
  (let (%636 2.0)
  (let (%637 (load-from-onnx-float32 768 768 "%637"))
  (let (%638 (load-from-onnx-float32 768 768 "%638"))
  (let (%639 (load-from-onnx-float32 768 768 "%639"))
  (let (%640 (vec 12))
  (let (%641 (vec 64))
  (let (%642 (vec 12))
  (let (%643 (vec 64))
  (let (%644 (vec 12))
  (let (%645 (vec 64))
  (let (%646 (vec 768))
  (let (%647 (load-from-onnx-float32 768 768 "%647"))
  (let (%648 2.0)
  (let (%649 (load-from-onnx-float32 768 3072 "%649"))
  (let (%650 (load-from-onnx-float32 3072 768 "%650"))
  (let (%651 2.0)
  (let (%652 (load-from-onnx-float32 768 2 "%652"))
  (let (bert.embeddings.LayerNorm.bias (load-from-onnx-float32 768 "bert.embeddings.LayerNorm.bias"))
  (let (bert.embeddings.LayerNorm.weight (load-from-onnx-float32 768 "bert.embeddings.LayerNorm.weight"))
  (let (bert.embeddings.position_embeddings.weight (load-from-onnx-float32 512 768 "bert.embeddings.position_embeddings.weight"))
  (let (bert.embeddings.position_ids (load-from-onnx-int64 1 512 "bert.embeddings.position_ids"))
  (let (bert.embeddings.token_type_embeddings.weight (load-from-onnx-float32 2 768 "bert.embeddings.token_type_embeddings.weight"))
  (let (bert.embeddings.word_embeddings.weight (load-from-onnx-float32 30522 768 "bert.embeddings.word_embeddings.weight"))
  (let (bert.encoder.layer.0.attention.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.output.LayerNorm.bias"))
  (let (bert.encoder.layer.0.attention.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.output.LayerNorm.weight"))
  (let (bert.encoder.layer.0.attention.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.output.dense.bias"))
  (let (bert.encoder.layer.0.attention.self.key.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.self.key.bias"))
  (let (bert.encoder.layer.0.attention.self.query.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.self.query.bias"))
  (let (bert.encoder.layer.0.attention.self.value.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.self.value.bias"))
  (let (bert.encoder.layer.0.intermediate.dense.bias (load-from-onnx-float32 3072 "bert.encoder.layer.0.intermediate.dense.bias"))
  (let (bert.encoder.layer.0.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.output.LayerNorm.bias"))
  (let (bert.encoder.layer.0.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.0.output.LayerNorm.weight"))
  (let (bert.encoder.layer.0.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.output.dense.bias"))
  (let (bert.encoder.layer.1.attention.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.output.LayerNorm.bias"))
  (let (bert.encoder.layer.1.attention.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.output.LayerNorm.weight"))
  (let (bert.encoder.layer.1.attention.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.output.dense.bias"))
  (let (bert.encoder.layer.1.attention.self.key.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.self.key.bias"))
  (let (bert.encoder.layer.1.attention.self.query.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.self.query.bias"))
  (let (bert.encoder.layer.1.attention.self.value.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.self.value.bias"))
  (let (bert.encoder.layer.1.intermediate.dense.bias (load-from-onnx-float32 3072 "bert.encoder.layer.1.intermediate.dense.bias"))
  (let (bert.encoder.layer.1.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.output.LayerNorm.bias"))
  (let (bert.encoder.layer.1.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.1.output.LayerNorm.weight"))
  (let (bert.encoder.layer.1.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.output.dense.bias"))
  (let (bert.encoder.layer.2.attention.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.output.LayerNorm.bias"))
  (let (bert.encoder.layer.2.attention.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.output.LayerNorm.weight"))
  (let (bert.encoder.layer.2.attention.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.output.dense.bias"))
  (let (bert.encoder.layer.2.attention.self.key.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.self.key.bias"))
  (let (bert.encoder.layer.2.attention.self.query.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.self.query.bias"))
  (let (bert.encoder.layer.2.attention.self.value.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.self.value.bias"))
  (let (bert.encoder.layer.2.intermediate.dense.bias (load-from-onnx-float32 3072 "bert.encoder.layer.2.intermediate.dense.bias"))
  (let (bert.encoder.layer.2.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.output.LayerNorm.bias"))
  (let (bert.encoder.layer.2.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.2.output.LayerNorm.weight"))
  (let (bert.encoder.layer.2.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.output.dense.bias"))
  (let (bert.encoder.layer.3.attention.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.3.attention.output.LayerNorm.bias"))
  (let (bert.encoder.layer.3.attention.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.3.attention.output.LayerNorm.weight"))
  (let (bert.encoder.layer.3.attention.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.3.attention.output.dense.bias"))
  (let (bert.encoder.layer.3.attention.self.key.bias (load-from-onnx-float32 768 "bert.encoder.layer.3.attention.self.key.bias"))
  (let (bert.encoder.layer.3.attention.self.query.bias (load-from-onnx-float32 768 "bert.encoder.layer.3.attention.self.query.bias"))
  (let (bert.encoder.layer.3.attention.self.value.bias (load-from-onnx-float32 768 "bert.encoder.layer.3.attention.self.value.bias"))
  (let (bert.encoder.layer.3.intermediate.dense.bias (load-from-onnx-float32 3072 "bert.encoder.layer.3.intermediate.dense.bias"))
  (let (bert.encoder.layer.3.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.3.output.LayerNorm.bias"))
  (let (bert.encoder.layer.3.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.3.output.LayerNorm.weight"))
  (let (bert.encoder.layer.3.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.3.output.dense.bias"))
  (let (qa_outputs.bias (vec 0.0 0.0))
  (let ($beg_of_internal_inits #|Begin of internal initializers|#  99999)
  (let ($end_of_inits #|End of initializers|#  99999)
  (let (%75 (Unsqueeze attention_mask (vec 1)))
  (let (%76 (Unsqueeze %75 (vec 2)))
  (let (%77 (Cast_FLOAT %76))
  (let (%78 (Constant 1.0))
  (let (%79 (Sub %78 %77))
  (let (%80 (Constant -10000.0))
  (let (%81 (Mul %79 %80))
  (let (%82 (Shape input_ids))
  (let (%83 (Constant 1))
  (let (%84 (Gather %82 %83 0))
  (let (%88 (Unsqueeze %84 (vec 0)))
  (let (%90 (Constant (vec 1)))
  (let (%91 (Slice bert.embeddings.position_ids %589 %88 %590 %90))
  (let (%92 (Gather bert.embeddings.word_embeddings.weight input_ids 0))
  (let (%93 (Gather bert.embeddings.position_embeddings.weight %91 0))
  (let (%94 (Gather bert.embeddings.token_type_embeddings.weight token_type_ids 0))
  (let (%95 (Add %92 %93))
  (let (%96 (Add %95 %94))
  (let (%98 (ReduceMean %96 (vec -1) 1))
  (let (%99 (Sub %96 %98))
  (let (%100 (Cast_FLOAT %99))
  (let (%102 (Pow %100 %591))
  (let (%103 (ReduceMean %102 (vec -1) 1))
  (let (%104 (Constant 9.999999960041972e-13))
  (let (%105 (Add %103 %104))
  (let (%106 (Sqrt %105))
  (let (%107 (Div %99 %106))
  (let (%108 (Mul %107 bert.embeddings.LayerNorm.weight))
  (let (%109 (Add %108 bert.embeddings.LayerNorm.bias))
  (let (%111 (MatMul %109 %592))
  (let (%112 (Add %111 bert.encoder.layer.0.attention.self.query.bias))
  (let (%114 (MatMul %109 %593))
  (let (%115 (Add %114 bert.encoder.layer.0.attention.self.key.bias))
  (let (%117 (MatMul %109 %594))
  (let (%118 (Add %117 bert.encoder.layer.0.attention.self.value.bias))
  (let (%119 (Shape %112))
  (let (%120 (Constant 0))
  (let (%121 (Gather %119 %120 0))
  (let (%122 (Shape %112))
  (let (%123 (Constant 1))
  (let (%124 (Gather %122 %123 0))
  (let (%127 (Unsqueeze %121 (vec 0)))
  (let (%128 (Unsqueeze %124 (vec 0)))
  (let (%131 (Concat %127 %128 %595 %596 0))
  (let (%132 (Reshape %112 %131))
  (let (%133 (Transpose %132 (vec 0 2 1 3)))
  (let (%134 (Shape %115))
  (let (%135 (Constant 0))
  (let (%136 (Gather %134 %135 0))
  (let (%137 (Shape %115))
  (let (%138 (Constant 1))
  (let (%139 (Gather %137 %138 0))
  (let (%142 (Unsqueeze %136 (vec 0)))
  (let (%143 (Unsqueeze %139 (vec 0)))
  (let (%146 (Concat %142 %143 %597 %598 0))
  (let (%147 (Reshape %115 %146))
  (let (%148 (Shape %118))
  (let (%149 (Constant 0))
  (let (%150 (Gather %148 %149 0))
  (let (%151 (Shape %118))
  (let (%152 (Constant 1))
  (let (%153 (Gather %151 %152 0))
  (let (%156 (Unsqueeze %150 (vec 0)))
  (let (%157 (Unsqueeze %153 (vec 0)))
  (let (%160 (Concat %156 %157 %599 %600 0))
  (let (%161 (Reshape %118 %160))
  (let (%162 (Transpose %161 (vec 0 2 1 3)))
  (let (%163 (Transpose %147 (vec 0 2 3 1)))
  (let (%164 (MatMul %133 %163))
  (let (%165 (Constant 8.0))
  (let (%166 (Div %164 %165))
  (let (%167 (Add %166 %81))
  (let (%168 (Softmax %167 3))
  (let (%169 (MatMul %168 %162))
  (let (%170 (Transpose %169 (vec 0 2 1 3)))
  (let (%171 (Shape %170))
  (let (%172 (Constant 0))
  (let (%173 (Gather %171 %172 0))
  (let (%174 (Shape %170))
  (let (%175 (Constant 1))
  (let (%176 (Gather %174 %175 0))
  (let (%178 (Unsqueeze %173 (vec 0)))
  (let (%179 (Unsqueeze %176 (vec 0)))
  (let (%181 (Concat %178 %179 %601 0))
  (let (%182 (Reshape %170 %181))
  (let (%184 (MatMul %182 %602))
  (let (%185 (Add %184 bert.encoder.layer.0.attention.output.dense.bias))
  (let (%186 (Add %185 %109))
  (let (%188 (ReduceMean %186 (vec -1) 1))
  (let (%189 (Sub %186 %188))
  (let (%190 (Cast_FLOAT %189))
  (let (%192 (Pow %190 %603))
  (let (%193 (ReduceMean %192 (vec -1) 1))
  (let (%194 (Constant 9.999999960041972e-13))
  (let (%195 (Add %193 %194))
  (let (%196 (Sqrt %195))
  (let (%197 (Div %189 %196))
  (let (%198 (Mul %197 bert.encoder.layer.0.attention.output.LayerNorm.weight))
  (let (%199 (Add %198 bert.encoder.layer.0.attention.output.LayerNorm.bias))
  (let (%201 (MatMul %199 %604))
  (let (%202 (Add %201 bert.encoder.layer.0.intermediate.dense.bias))
  (let (%203 (Constant 1.4142135381698608))
  (let (%204 (Div %202 %203))
  (let (%205 (Erf %204))
  (let (%206 (Constant 1.0))
  (let (%207 (Add %205 %206))
  (let (%208 (Mul %202 %207))
  (let (%209 (Constant 0.5))
  (let (%210 (Mul %208 %209))
  (let (%212 (MatMul %210 %605))
  (let (%213 (Add %212 bert.encoder.layer.0.output.dense.bias))
  (let (%214 (Add %213 %199))
  (let (%216 (ReduceMean %214 (vec -1) 1))
  (let (%217 (Sub %214 %216))
  (let (%218 (Cast_FLOAT %217))
  (let (%220 (Pow %218 %606))
  (let (%221 (ReduceMean %220 (vec -1) 1))
  (let (%222 (Constant 9.999999960041972e-13))
  (let (%223 (Add %221 %222))
  (let (%224 (Sqrt %223))
  (let (%225 (Div %217 %224))
  (let (%226 (Mul %225 bert.encoder.layer.0.output.LayerNorm.weight))
  (let (%227 (Add %226 bert.encoder.layer.0.output.LayerNorm.bias))
  (let (%229 (MatMul %227 %607))
  (let (%230 (Add %229 bert.encoder.layer.1.attention.self.query.bias))
  (let (%232 (MatMul %227 %608))
  (let (%233 (Add %232 bert.encoder.layer.1.attention.self.key.bias))
  (let (%235 (MatMul %227 %609))
  (let (%236 (Add %235 bert.encoder.layer.1.attention.self.value.bias))
  (let (%237 (Shape %230))
  (let (%238 (Constant 0))
  (let (%239 (Gather %237 %238 0))
  (let (%240 (Shape %230))
  (let (%241 (Constant 1))
  (let (%242 (Gather %240 %241 0))
  (let (%245 (Unsqueeze %239 (vec 0)))
  (let (%246 (Unsqueeze %242 (vec 0)))
  (let (%249 (Concat %245 %246 %610 %611 0))
  (let (%250 (Reshape %230 %249))
  (let (%251 (Transpose %250 (vec 0 2 1 3)))
  (let (%252 (Shape %233))
  (let (%253 (Constant 0))
  (let (%254 (Gather %252 %253 0))
  (let (%255 (Shape %233))
  (let (%256 (Constant 1))
  (let (%257 (Gather %255 %256 0))
  (let (%260 (Unsqueeze %254 (vec 0)))
  (let (%261 (Unsqueeze %257 (vec 0)))
  (let (%264 (Concat %260 %261 %612 %613 0))
  (let (%265 (Reshape %233 %264))
  (let (%266 (Shape %236))
  (let (%267 (Constant 0))
  (let (%268 (Gather %266 %267 0))
  (let (%269 (Shape %236))
  (let (%270 (Constant 1))
  (let (%271 (Gather %269 %270 0))
  (let (%274 (Unsqueeze %268 (vec 0)))
  (let (%275 (Unsqueeze %271 (vec 0)))
  (let (%278 (Concat %274 %275 %614 %615 0))
  (let (%279 (Reshape %236 %278))
  (let (%280 (Transpose %279 (vec 0 2 1 3)))
  (let (%281 (Transpose %265 (vec 0 2 3 1)))
  (let (%282 (MatMul %251 %281))
  (let (%283 (Constant 8.0))
  (let (%284 (Div %282 %283))
  (let (%285 (Add %284 %81))
  (let (%286 (Softmax %285 3))
  (let (%287 (MatMul %286 %280))
  (let (%288 (Transpose %287 (vec 0 2 1 3)))
  (let (%289 (Shape %288))
  (let (%290 (Constant 0))
  (let (%291 (Gather %289 %290 0))
  (let (%292 (Shape %288))
  (let (%293 (Constant 1))
  (let (%294 (Gather %292 %293 0))
  (let (%296 (Unsqueeze %291 (vec 0)))
  (let (%297 (Unsqueeze %294 (vec 0)))
  (let (%299 (Concat %296 %297 %616 0))
  (let (%300 (Reshape %288 %299))
  (let (%302 (MatMul %300 %617))
  (let (%303 (Add %302 bert.encoder.layer.1.attention.output.dense.bias))
  (let (%304 (Add %303 %227))
  (let (%306 (ReduceMean %304 (vec -1) 1))
  (let (%307 (Sub %304 %306))
  (let (%308 (Cast_FLOAT %307))
  (let (%310 (Pow %308 %618))
  (let (%311 (ReduceMean %310 (vec -1) 1))
  (let (%312 (Constant 9.999999960041972e-13))
  (let (%313 (Add %311 %312))
  (let (%314 (Sqrt %313))
  (let (%315 (Div %307 %314))
  (let (%316 (Mul %315 bert.encoder.layer.1.attention.output.LayerNorm.weight))
  (let (%317 (Add %316 bert.encoder.layer.1.attention.output.LayerNorm.bias))
  (let (%319 (MatMul %317 %619))
  (let (%320 (Add %319 bert.encoder.layer.1.intermediate.dense.bias))
  (let (%321 (Constant 1.4142135381698608))
  (let (%322 (Div %320 %321))
  (let (%323 (Erf %322))
  (let (%324 (Constant 1.0))
  (let (%325 (Add %323 %324))
  (let (%326 (Mul %320 %325))
  (let (%327 (Constant 0.5))
  (let (%328 (Mul %326 %327))
  (let (%330 (MatMul %328 %620))
  (let (%331 (Add %330 bert.encoder.layer.1.output.dense.bias))
  (let (%332 (Add %331 %317))
  (let (%334 (ReduceMean %332 (vec -1) 1))
  (let (%335 (Sub %332 %334))
  (let (%336 (Cast_FLOAT %335))
  (let (%338 (Pow %336 %621))
  (let (%339 (ReduceMean %338 (vec -1) 1))
  (let (%340 (Constant 9.999999960041972e-13))
  (let (%341 (Add %339 %340))
  (let (%342 (Sqrt %341))
  (let (%343 (Div %335 %342))
  (let (%344 (Mul %343 bert.encoder.layer.1.output.LayerNorm.weight))
  (let (%345 (Add %344 bert.encoder.layer.1.output.LayerNorm.bias))
  (let (%347 (MatMul %345 %622))
  (let (%348 (Add %347 bert.encoder.layer.2.attention.self.query.bias))
  (let (%350 (MatMul %345 %623))
  (let (%351 (Add %350 bert.encoder.layer.2.attention.self.key.bias))
  (let (%353 (MatMul %345 %624))
  (let (%354 (Add %353 bert.encoder.layer.2.attention.self.value.bias))
  (let (%355 (Shape %348))
  (let (%356 (Constant 0))
  (let (%357 (Gather %355 %356 0))
  (let (%358 (Shape %348))
  (let (%359 (Constant 1))
  (let (%360 (Gather %358 %359 0))
  (let (%363 (Unsqueeze %357 (vec 0)))
  (let (%364 (Unsqueeze %360 (vec 0)))
  (let (%367 (Concat %363 %364 %625 %626 0))
  (let (%368 (Reshape %348 %367))
  (let (%369 (Transpose %368 (vec 0 2 1 3)))
  (let (%370 (Shape %351))
  (let (%371 (Constant 0))
  (let (%372 (Gather %370 %371 0))
  (let (%373 (Shape %351))
  (let (%374 (Constant 1))
  (let (%375 (Gather %373 %374 0))
  (let (%378 (Unsqueeze %372 (vec 0)))
  (let (%379 (Unsqueeze %375 (vec 0)))
  (let (%382 (Concat %378 %379 %627 %628 0))
  (let (%383 (Reshape %351 %382))
  (let (%384 (Shape %354))
  (let (%385 (Constant 0))
  (let (%386 (Gather %384 %385 0))
  (let (%387 (Shape %354))
  (let (%388 (Constant 1))
  (let (%389 (Gather %387 %388 0))
  (let (%392 (Unsqueeze %386 (vec 0)))
  (let (%393 (Unsqueeze %389 (vec 0)))
  (let (%396 (Concat %392 %393 %629 %630 0))
  (let (%397 (Reshape %354 %396))
  (let (%398 (Transpose %397 (vec 0 2 1 3)))
  (let (%399 (Transpose %383 (vec 0 2 3 1)))
  (let (%400 (MatMul %369 %399))
  (let (%401 (Constant 8.0))
  (let (%402 (Div %400 %401))
  (let (%403 (Add %402 %81))
  (let (%404 (Softmax %403 3))
  (let (%405 (MatMul %404 %398))
  (let (%406 (Transpose %405 (vec 0 2 1 3)))
  (let (%407 (Shape %406))
  (let (%408 (Constant 0))
  (let (%409 (Gather %407 %408 0))
  (let (%410 (Shape %406))
  (let (%411 (Constant 1))
  (let (%412 (Gather %410 %411 0))
  (let (%414 (Unsqueeze %409 (vec 0)))
  (let (%415 (Unsqueeze %412 (vec 0)))
  (let (%417 (Concat %414 %415 %631 0))
  (let (%418 (Reshape %406 %417))
  (let (%420 (MatMul %418 %632))
  (let (%421 (Add %420 bert.encoder.layer.2.attention.output.dense.bias))
  (let (%422 (Add %421 %345))
  (let (%424 (ReduceMean %422 (vec -1) 1))
  (let (%425 (Sub %422 %424))
  (let (%426 (Cast_FLOAT %425))
  (let (%428 (Pow %426 %633))
  (let (%429 (ReduceMean %428 (vec -1) 1))
  (let (%430 (Constant 9.999999960041972e-13))
  (let (%431 (Add %429 %430))
  (let (%432 (Sqrt %431))
  (let (%433 (Div %425 %432))
  (let (%434 (Mul %433 bert.encoder.layer.2.attention.output.LayerNorm.weight))
  (let (%435 (Add %434 bert.encoder.layer.2.attention.output.LayerNorm.bias))
  (let (%437 (MatMul %435 %634))
  (let (%438 (Add %437 bert.encoder.layer.2.intermediate.dense.bias))
  (let (%439 (Constant 1.4142135381698608))
  (let (%440 (Div %438 %439))
  (let (%441 (Erf %440))
  (let (%442 (Constant 1.0))
  (let (%443 (Add %441 %442))
  (let (%444 (Mul %438 %443))
  (let (%445 (Constant 0.5))
  (let (%446 (Mul %444 %445))
  (let (%448 (MatMul %446 %635))
  (let (%449 (Add %448 bert.encoder.layer.2.output.dense.bias))
  (let (%450 (Add %449 %435))
  (let (%452 (ReduceMean %450 (vec -1) 1))
  (let (%453 (Sub %450 %452))
  (let (%454 (Cast_FLOAT %453))
  (let (%456 (Pow %454 %636))
  (let (%457 (ReduceMean %456 (vec -1) 1))
  (let (%458 (Constant 9.999999960041972e-13))
  (let (%459 (Add %457 %458))
  (let (%460 (Sqrt %459))
  (let (%461 (Div %453 %460))
  (let (%462 (Mul %461 bert.encoder.layer.2.output.LayerNorm.weight))
  (let (%463 (Add %462 bert.encoder.layer.2.output.LayerNorm.bias))
  (let (%465 (MatMul %463 %637))
  (let (%466 (Add %465 bert.encoder.layer.3.attention.self.query.bias))
  (let (%468 (MatMul %463 %638))
  (let (%469 (Add %468 bert.encoder.layer.3.attention.self.key.bias))
  (let (%471 (MatMul %463 %639))
  (let (%472 (Add %471 bert.encoder.layer.3.attention.self.value.bias))
  (let (%473 (Shape %466))
  (let (%474 (Constant 0))
  (let (%475 (Gather %473 %474 0))
  (let (%476 (Shape %466))
  (let (%477 (Constant 1))
  (let (%478 (Gather %476 %477 0))
  (let (%481 (Unsqueeze %475 (vec 0)))
  (let (%482 (Unsqueeze %478 (vec 0)))
  (let (%485 (Concat %481 %482 %640 %641 0))
  (let (%486 (Reshape %466 %485))
  (let (%487 (Transpose %486 (vec 0 2 1 3)))
  (let (%488 (Shape %469))
  (let (%489 (Constant 0))
  (let (%490 (Gather %488 %489 0))
  (let (%491 (Shape %469))
  (let (%492 (Constant 1))
  (let (%493 (Gather %491 %492 0))
  (let (%496 (Unsqueeze %490 (vec 0)))
  (let (%497 (Unsqueeze %493 (vec 0)))
  (let (%500 (Concat %496 %497 %642 %643 0))
  (let (%501 (Reshape %469 %500))
  (let (%502 (Shape %472))
  (let (%503 (Constant 0))
  (let (%504 (Gather %502 %503 0))
  (let (%505 (Shape %472))
  (let (%506 (Constant 1))
  (let (%507 (Gather %505 %506 0))
  (let (%510 (Unsqueeze %504 (vec 0)))
  (let (%511 (Unsqueeze %507 (vec 0)))
  (let (%514 (Concat %510 %511 %644 %645 0))
  (let (%515 (Reshape %472 %514))
  (let (%516 (Transpose %515 (vec 0 2 1 3)))
  (let (%517 (Transpose %501 (vec 0 2 3 1)))
  (let (%518 (MatMul %487 %517))
  (let (%519 (Constant 8.0))
  (let (%520 (Div %518 %519))
  (let (%521 (Add %520 %81))
  (let (%522 (Softmax %521 3))
  (let (%523 (MatMul %522 %516))
  (let (%524 (Transpose %523 (vec 0 2 1 3)))
  (let (%525 (Shape %524))
  (let (%526 (Constant 0))
  (let (%527 (Gather %525 %526 0))
  (let (%528 (Shape %524))
  (let (%529 (Constant 1))
  (let (%530 (Gather %528 %529 0))
  (let (%532 (Unsqueeze %527 (vec 0)))
  (let (%533 (Unsqueeze %530 (vec 0)))
  (let (%535 (Concat %532 %533 %646 0))
  (let (%536 (Reshape %524 %535))
  (let (%538 (MatMul %536 %647))
  (let (%539 (Add %538 bert.encoder.layer.3.attention.output.dense.bias))
  (let (%540 (Add %539 %463))
  (let (%542 (ReduceMean %540 (vec -1) 1))
  (let (%543 (Sub %540 %542))
  (let (%544 (Cast_FLOAT %543))
  (let (%546 (Pow %544 %648))
  (let (%547 (ReduceMean %546 (vec -1) 1))
  (let (%548 (Constant 9.999999960041972e-13))
  (let (%549 (Add %547 %548))
  (let (%550 (Sqrt %549))
  (let (%551 (Div %543 %550))
  (let (%552 (Mul %551 bert.encoder.layer.3.attention.output.LayerNorm.weight))
  (let (%553 (Add %552 bert.encoder.layer.3.attention.output.LayerNorm.bias))
  (let (%555 (MatMul %553 %649))
  (let (%556 (Add %555 bert.encoder.layer.3.intermediate.dense.bias))
  (let (%557 (Constant 1.4142135381698608))
  (let (%558 (Div %556 %557))
  (let (%559 (Erf %558))
  (let (%560 (Constant 1.0))
  (let (%561 (Add %559 %560))
  (let (%562 (Mul %556 %561))
  (let (%563 (Constant 0.5))
  (let (%564 (Mul %562 %563))
  (let (%566 (MatMul %564 %650))
  (let (%567 (Add %566 bert.encoder.layer.3.output.dense.bias))
  (let (%568 (Add %567 %553))
  (let (%570 (ReduceMean %568 (vec -1) 1))
  (let (%571 (Sub %568 %570))
  (let (%572 (Cast_FLOAT %571))
  (let (%574 (Pow %572 %651))
  (let (%575 (ReduceMean %574 (vec -1) 1))
  (let (%576 (Constant 9.999999960041972e-13))
  (let (%577 (Add %575 %576))
  (let (%578 (Sqrt %577))
  (let (%579 (Div %571 %578))
  (let (%580 (Mul %579 bert.encoder.layer.3.output.LayerNorm.weight))
  (let (%581 (Add %580 bert.encoder.layer.3.output.LayerNorm.bias))
  (let (%583 (MatMul %581 %652))
  (let (%584 (Add %583 qa_outputs.bias))
  (let ((%585 %586) (Split %584 (vec 1 1) -1))
  (let (output_0 (Squeeze %585 (vec -1)))
  (let (output_1 (Squeeze %586 (vec -1)))
  output

(def main None ((input_ids : (Vec Integer)) (attention_mask : (Vec Integer)) (token_type_ids : (Vec Integer)))
  (torch-jit-export input_ids attention_mask token_type_ids))

