;; AUTOGENERATED FROM obj/hf-bert-to-onnx/bert3.onnx
(def torch-jit-export
     None
     ((input_ids : (Vec Integer)) (attention_mask : (Vec Integer)) (token_type_ids : (Vec Integer)))
  (let (%455 (vec 0))
  (let (%456 (vec 1))
  (let (%457 2.0)
  (let (%458 (load-from-onnx-float32 768 768 "%458"))
  (let (%459 (load-from-onnx-float32 768 768 "%459"))
  (let (%460 (load-from-onnx-float32 768 768 "%460"))
  (let (%461 (vec 12))
  (let (%462 (vec 64))
  (let (%463 (vec 12))
  (let (%464 (vec 64))
  (let (%465 (vec 12))
  (let (%466 (vec 64))
  (let (%467 (vec 768))
  (let (%468 (load-from-onnx-float32 768 768 "%468"))
  (let (%469 2.0)
  (let (%470 (load-from-onnx-float32 768 3072 "%470"))
  (let (%471 (load-from-onnx-float32 3072 768 "%471"))
  (let (%472 2.0)
  (let (%473 (load-from-onnx-float32 768 768 "%473"))
  (let (%474 (load-from-onnx-float32 768 768 "%474"))
  (let (%475 (load-from-onnx-float32 768 768 "%475"))
  (let (%476 (vec 12))
  (let (%477 (vec 64))
  (let (%478 (vec 12))
  (let (%479 (vec 64))
  (let (%480 (vec 12))
  (let (%481 (vec 64))
  (let (%482 (vec 768))
  (let (%483 (load-from-onnx-float32 768 768 "%483"))
  (let (%484 2.0)
  (let (%485 (load-from-onnx-float32 768 3072 "%485"))
  (let (%486 (load-from-onnx-float32 3072 768 "%486"))
  (let (%487 2.0)
  (let (%488 (load-from-onnx-float32 768 768 "%488"))
  (let (%489 (load-from-onnx-float32 768 768 "%489"))
  (let (%490 (load-from-onnx-float32 768 768 "%490"))
  (let (%491 (vec 12))
  (let (%492 (vec 64))
  (let (%493 (vec 12))
  (let (%494 (vec 64))
  (let (%495 (vec 12))
  (let (%496 (vec 64))
  (let (%497 (vec 768))
  (let (%498 (load-from-onnx-float32 768 768 "%498"))
  (let (%499 2.0)
  (let (%500 (load-from-onnx-float32 768 3072 "%500"))
  (let (%501 (load-from-onnx-float32 3072 768 "%501"))
  (let (%502 2.0)
  (let (%503 (load-from-onnx-float32 768 2 "%503"))
  (let (bert.embeddings.LayerNorm.bias (load-from-onnx-float32 768 "bert.embeddings.LayerNorm.bias"))
  (let (bert.embeddings.LayerNorm.weight (load-from-onnx-float32 768 "bert.embeddings.LayerNorm.weight"))
  (let (bert.embeddings.position_embeddings.weight (load-from-onnx-float32 512 768 "bert.embeddings.position_embeddings.weight"))
  (let (bert.embeddings.position_ids (load-from-onnx-int64 1 512 "bert.embeddings.position_ids"))
  (let (bert.embeddings.token_type_embeddings.weight (load-from-onnx-float32 2 768 "bert.embeddings.token_type_embeddings.weight"))
  (let (bert.embeddings.word_embeddings.weight (load-from-onnx-float32 30522 768 "bert.embeddings.word_embeddings.weight"))
  (let (bert.encoder.layer.0.attention.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.output.LayerNorm.bias"))
  (let (bert.encoder.layer.0.attention.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.output.LayerNorm.weight"))
  (let (bert.encoder.layer.0.attention.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.output.dense.bias"))
  (let (bert.encoder.layer.0.attention.self.key.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.self.key.bias"))
  (let (bert.encoder.layer.0.attention.self.query.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.self.query.bias"))
  (let (bert.encoder.layer.0.attention.self.value.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.attention.self.value.bias"))
  (let (bert.encoder.layer.0.intermediate.dense.bias (load-from-onnx-float32 3072 "bert.encoder.layer.0.intermediate.dense.bias"))
  (let (bert.encoder.layer.0.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.output.LayerNorm.bias"))
  (let (bert.encoder.layer.0.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.0.output.LayerNorm.weight"))
  (let (bert.encoder.layer.0.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.0.output.dense.bias"))
  (let (bert.encoder.layer.1.attention.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.output.LayerNorm.bias"))
  (let (bert.encoder.layer.1.attention.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.output.LayerNorm.weight"))
  (let (bert.encoder.layer.1.attention.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.output.dense.bias"))
  (let (bert.encoder.layer.1.attention.self.key.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.self.key.bias"))
  (let (bert.encoder.layer.1.attention.self.query.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.self.query.bias"))
  (let (bert.encoder.layer.1.attention.self.value.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.attention.self.value.bias"))
  (let (bert.encoder.layer.1.intermediate.dense.bias (load-from-onnx-float32 3072 "bert.encoder.layer.1.intermediate.dense.bias"))
  (let (bert.encoder.layer.1.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.output.LayerNorm.bias"))
  (let (bert.encoder.layer.1.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.1.output.LayerNorm.weight"))
  (let (bert.encoder.layer.1.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.1.output.dense.bias"))
  (let (bert.encoder.layer.2.attention.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.output.LayerNorm.bias"))
  (let (bert.encoder.layer.2.attention.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.output.LayerNorm.weight"))
  (let (bert.encoder.layer.2.attention.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.output.dense.bias"))
  (let (bert.encoder.layer.2.attention.self.key.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.self.key.bias"))
  (let (bert.encoder.layer.2.attention.self.query.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.self.query.bias"))
  (let (bert.encoder.layer.2.attention.self.value.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.attention.self.value.bias"))
  (let (bert.encoder.layer.2.intermediate.dense.bias (load-from-onnx-float32 3072 "bert.encoder.layer.2.intermediate.dense.bias"))
  (let (bert.encoder.layer.2.output.LayerNorm.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.output.LayerNorm.bias"))
  (let (bert.encoder.layer.2.output.LayerNorm.weight (load-from-onnx-float32 768 "bert.encoder.layer.2.output.LayerNorm.weight"))
  (let (bert.encoder.layer.2.output.dense.bias (load-from-onnx-float32 768 "bert.encoder.layer.2.output.dense.bias"))
  (let (qa_outputs.bias (vec 0.0 0.0))
  (let ($beg_of_internal_inits #|Begin of internal initializers|#  99999)
  (let ($end_of_inits #|End of initializers|#  99999)
  (let (%59 (Unsqueeze attention_mask (vec 1)))
  (let (%60 (Unsqueeze %59 (vec 2)))
  (let (%61 (Cast_FLOAT %60))
  (let (%62 (Constant 1.0))
  (let (%63 (Sub %62 %61))
  (let (%64 (Constant -10000.0))
  (let (%65 (Mul %63 %64))
  (let (%66 (Shape input_ids))
  (let (%67 (Constant 1))
  (let (%68 (Gather %66 %67 0))
  (let (%72 (Unsqueeze %68 (vec 0)))
  (let (%74 (Constant (vec 1)))
  (let (%75 (Slice bert.embeddings.position_ids %455 %72 %456 %74))
  (let (%76 (Gather bert.embeddings.word_embeddings.weight input_ids 0))
  (let (%77 (Gather bert.embeddings.position_embeddings.weight %75 0))
  (let (%78 (Gather bert.embeddings.token_type_embeddings.weight token_type_ids 0))
  (let (%79 (Add %76 %77))
  (let (%80 (Add %79 %78))
  (let (%82 (ReduceMean %80 (vec -1) 1))
  (let (%83 (Sub %80 %82))
  (let (%84 (Cast_FLOAT %83))
  (let (%86 (Pow %84 %457))
  (let (%87 (ReduceMean %86 (vec -1) 1))
  (let (%88 (Constant 9.999999960041972e-13))
  (let (%89 (Add %87 %88))
  (let (%90 (Sqrt %89))
  (let (%91 (Div %83 %90))
  (let (%92 (Mul %91 bert.embeddings.LayerNorm.weight))
  (let (%93 (Add %92 bert.embeddings.LayerNorm.bias))
  (let (%95 (MatMul %93 %458))
  (let (%96 (Add %95 bert.encoder.layer.0.attention.self.query.bias))
  (let (%98 (MatMul %93 %459))
  (let (%99 (Add %98 bert.encoder.layer.0.attention.self.key.bias))
  (let (%101 (MatMul %93 %460))
  (let (%102 (Add %101 bert.encoder.layer.0.attention.self.value.bias))
  (let (%103 (Shape %96))
  (let (%104 (Constant 0))
  (let (%105 (Gather %103 %104 0))
  (let (%106 (Shape %96))
  (let (%107 (Constant 1))
  (let (%108 (Gather %106 %107 0))
  (let (%111 (Unsqueeze %105 (vec 0)))
  (let (%112 (Unsqueeze %108 (vec 0)))
  (let (%115 (Concat %111 %112 %461 %462 0))
  (let (%116 (Reshape %96 %115))
  (let (%117 (Transpose %116 (vec 0 2 1 3)))
  (let (%118 (Shape %99))
  (let (%119 (Constant 0))
  (let (%120 (Gather %118 %119 0))
  (let (%121 (Shape %99))
  (let (%122 (Constant 1))
  (let (%123 (Gather %121 %122 0))
  (let (%126 (Unsqueeze %120 (vec 0)))
  (let (%127 (Unsqueeze %123 (vec 0)))
  (let (%130 (Concat %126 %127 %463 %464 0))
  (let (%131 (Reshape %99 %130))
  (let (%132 (Shape %102))
  (let (%133 (Constant 0))
  (let (%134 (Gather %132 %133 0))
  (let (%135 (Shape %102))
  (let (%136 (Constant 1))
  (let (%137 (Gather %135 %136 0))
  (let (%140 (Unsqueeze %134 (vec 0)))
  (let (%141 (Unsqueeze %137 (vec 0)))
  (let (%144 (Concat %140 %141 %465 %466 0))
  (let (%145 (Reshape %102 %144))
  (let (%146 (Transpose %145 (vec 0 2 1 3)))
  (let (%147 (Transpose %131 (vec 0 2 3 1)))
  (let (%148 (MatMul %117 %147))
  (let (%149 (Constant 8.0))
  (let (%150 (Div %148 %149))
  (let (%151 (Add %150 %65))
  (let (%152 (Softmax %151 3))
  (let (%153 (MatMul %152 %146))
  (let (%154 (Transpose %153 (vec 0 2 1 3)))
  (let (%155 (Shape %154))
  (let (%156 (Constant 0))
  (let (%157 (Gather %155 %156 0))
  (let (%158 (Shape %154))
  (let (%159 (Constant 1))
  (let (%160 (Gather %158 %159 0))
  (let (%162 (Unsqueeze %157 (vec 0)))
  (let (%163 (Unsqueeze %160 (vec 0)))
  (let (%165 (Concat %162 %163 %467 0))
  (let (%166 (Reshape %154 %165))
  (let (%168 (MatMul %166 %468))
  (let (%169 (Add %168 bert.encoder.layer.0.attention.output.dense.bias))
  (let (%170 (Add %169 %93))
  (let (%172 (ReduceMean %170 (vec -1) 1))
  (let (%173 (Sub %170 %172))
  (let (%174 (Cast_FLOAT %173))
  (let (%176 (Pow %174 %469))
  (let (%177 (ReduceMean %176 (vec -1) 1))
  (let (%178 (Constant 9.999999960041972e-13))
  (let (%179 (Add %177 %178))
  (let (%180 (Sqrt %179))
  (let (%181 (Div %173 %180))
  (let (%182 (Mul %181 bert.encoder.layer.0.attention.output.LayerNorm.weight))
  (let (%183 (Add %182 bert.encoder.layer.0.attention.output.LayerNorm.bias))
  (let (%185 (MatMul %183 %470))
  (let (%186 (Add %185 bert.encoder.layer.0.intermediate.dense.bias))
  (let (%187 (Constant 1.4142135381698608))
  (let (%188 (Div %186 %187))
  (let (%189 (Erf %188))
  (let (%190 (Constant 1.0))
  (let (%191 (Add %189 %190))
  (let (%192 (Mul %186 %191))
  (let (%193 (Constant 0.5))
  (let (%194 (Mul %192 %193))
  (let (%196 (MatMul %194 %471))
  (let (%197 (Add %196 bert.encoder.layer.0.output.dense.bias))
  (let (%198 (Add %197 %183))
  (let (%200 (ReduceMean %198 (vec -1) 1))
  (let (%201 (Sub %198 %200))
  (let (%202 (Cast_FLOAT %201))
  (let (%204 (Pow %202 %472))
  (let (%205 (ReduceMean %204 (vec -1) 1))
  (let (%206 (Constant 9.999999960041972e-13))
  (let (%207 (Add %205 %206))
  (let (%208 (Sqrt %207))
  (let (%209 (Div %201 %208))
  (let (%210 (Mul %209 bert.encoder.layer.0.output.LayerNorm.weight))
  (let (%211 (Add %210 bert.encoder.layer.0.output.LayerNorm.bias))
  (let (%213 (MatMul %211 %473))
  (let (%214 (Add %213 bert.encoder.layer.1.attention.self.query.bias))
  (let (%216 (MatMul %211 %474))
  (let (%217 (Add %216 bert.encoder.layer.1.attention.self.key.bias))
  (let (%219 (MatMul %211 %475))
  (let (%220 (Add %219 bert.encoder.layer.1.attention.self.value.bias))
  (let (%221 (Shape %214))
  (let (%222 (Constant 0))
  (let (%223 (Gather %221 %222 0))
  (let (%224 (Shape %214))
  (let (%225 (Constant 1))
  (let (%226 (Gather %224 %225 0))
  (let (%229 (Unsqueeze %223 (vec 0)))
  (let (%230 (Unsqueeze %226 (vec 0)))
  (let (%233 (Concat %229 %230 %476 %477 0))
  (let (%234 (Reshape %214 %233))
  (let (%235 (Transpose %234 (vec 0 2 1 3)))
  (let (%236 (Shape %217))
  (let (%237 (Constant 0))
  (let (%238 (Gather %236 %237 0))
  (let (%239 (Shape %217))
  (let (%240 (Constant 1))
  (let (%241 (Gather %239 %240 0))
  (let (%244 (Unsqueeze %238 (vec 0)))
  (let (%245 (Unsqueeze %241 (vec 0)))
  (let (%248 (Concat %244 %245 %478 %479 0))
  (let (%249 (Reshape %217 %248))
  (let (%250 (Shape %220))
  (let (%251 (Constant 0))
  (let (%252 (Gather %250 %251 0))
  (let (%253 (Shape %220))
  (let (%254 (Constant 1))
  (let (%255 (Gather %253 %254 0))
  (let (%258 (Unsqueeze %252 (vec 0)))
  (let (%259 (Unsqueeze %255 (vec 0)))
  (let (%262 (Concat %258 %259 %480 %481 0))
  (let (%263 (Reshape %220 %262))
  (let (%264 (Transpose %263 (vec 0 2 1 3)))
  (let (%265 (Transpose %249 (vec 0 2 3 1)))
  (let (%266 (MatMul %235 %265))
  (let (%267 (Constant 8.0))
  (let (%268 (Div %266 %267))
  (let (%269 (Add %268 %65))
  (let (%270 (Softmax %269 3))
  (let (%271 (MatMul %270 %264))
  (let (%272 (Transpose %271 (vec 0 2 1 3)))
  (let (%273 (Shape %272))
  (let (%274 (Constant 0))
  (let (%275 (Gather %273 %274 0))
  (let (%276 (Shape %272))
  (let (%277 (Constant 1))
  (let (%278 (Gather %276 %277 0))
  (let (%280 (Unsqueeze %275 (vec 0)))
  (let (%281 (Unsqueeze %278 (vec 0)))
  (let (%283 (Concat %280 %281 %482 0))
  (let (%284 (Reshape %272 %283))
  (let (%286 (MatMul %284 %483))
  (let (%287 (Add %286 bert.encoder.layer.1.attention.output.dense.bias))
  (let (%288 (Add %287 %211))
  (let (%290 (ReduceMean %288 (vec -1) 1))
  (let (%291 (Sub %288 %290))
  (let (%292 (Cast_FLOAT %291))
  (let (%294 (Pow %292 %484))
  (let (%295 (ReduceMean %294 (vec -1) 1))
  (let (%296 (Constant 9.999999960041972e-13))
  (let (%297 (Add %295 %296))
  (let (%298 (Sqrt %297))
  (let (%299 (Div %291 %298))
  (let (%300 (Mul %299 bert.encoder.layer.1.attention.output.LayerNorm.weight))
  (let (%301 (Add %300 bert.encoder.layer.1.attention.output.LayerNorm.bias))
  (let (%303 (MatMul %301 %485))
  (let (%304 (Add %303 bert.encoder.layer.1.intermediate.dense.bias))
  (let (%305 (Constant 1.4142135381698608))
  (let (%306 (Div %304 %305))
  (let (%307 (Erf %306))
  (let (%308 (Constant 1.0))
  (let (%309 (Add %307 %308))
  (let (%310 (Mul %304 %309))
  (let (%311 (Constant 0.5))
  (let (%312 (Mul %310 %311))
  (let (%314 (MatMul %312 %486))
  (let (%315 (Add %314 bert.encoder.layer.1.output.dense.bias))
  (let (%316 (Add %315 %301))
  (let (%318 (ReduceMean %316 (vec -1) 1))
  (let (%319 (Sub %316 %318))
  (let (%320 (Cast_FLOAT %319))
  (let (%322 (Pow %320 %487))
  (let (%323 (ReduceMean %322 (vec -1) 1))
  (let (%324 (Constant 9.999999960041972e-13))
  (let (%325 (Add %323 %324))
  (let (%326 (Sqrt %325))
  (let (%327 (Div %319 %326))
  (let (%328 (Mul %327 bert.encoder.layer.1.output.LayerNorm.weight))
  (let (%329 (Add %328 bert.encoder.layer.1.output.LayerNorm.bias))
  (let (%331 (MatMul %329 %488))
  (let (%332 (Add %331 bert.encoder.layer.2.attention.self.query.bias))
  (let (%334 (MatMul %329 %489))
  (let (%335 (Add %334 bert.encoder.layer.2.attention.self.key.bias))
  (let (%337 (MatMul %329 %490))
  (let (%338 (Add %337 bert.encoder.layer.2.attention.self.value.bias))
  (let (%339 (Shape %332))
  (let (%340 (Constant 0))
  (let (%341 (Gather %339 %340 0))
  (let (%342 (Shape %332))
  (let (%343 (Constant 1))
  (let (%344 (Gather %342 %343 0))
  (let (%347 (Unsqueeze %341 (vec 0)))
  (let (%348 (Unsqueeze %344 (vec 0)))
  (let (%351 (Concat %347 %348 %491 %492 0))
  (let (%352 (Reshape %332 %351))
  (let (%353 (Transpose %352 (vec 0 2 1 3)))
  (let (%354 (Shape %335))
  (let (%355 (Constant 0))
  (let (%356 (Gather %354 %355 0))
  (let (%357 (Shape %335))
  (let (%358 (Constant 1))
  (let (%359 (Gather %357 %358 0))
  (let (%362 (Unsqueeze %356 (vec 0)))
  (let (%363 (Unsqueeze %359 (vec 0)))
  (let (%366 (Concat %362 %363 %493 %494 0))
  (let (%367 (Reshape %335 %366))
  (let (%368 (Shape %338))
  (let (%369 (Constant 0))
  (let (%370 (Gather %368 %369 0))
  (let (%371 (Shape %338))
  (let (%372 (Constant 1))
  (let (%373 (Gather %371 %372 0))
  (let (%376 (Unsqueeze %370 (vec 0)))
  (let (%377 (Unsqueeze %373 (vec 0)))
  (let (%380 (Concat %376 %377 %495 %496 0))
  (let (%381 (Reshape %338 %380))
  (let (%382 (Transpose %381 (vec 0 2 1 3)))
  (let (%383 (Transpose %367 (vec 0 2 3 1)))
  (let (%384 (MatMul %353 %383))
  (let (%385 (Constant 8.0))
  (let (%386 (Div %384 %385))
  (let (%387 (Add %386 %65))
  (let (%388 (Softmax %387 3))
  (let (%389 (MatMul %388 %382))
  (let (%390 (Transpose %389 (vec 0 2 1 3)))
  (let (%391 (Shape %390))
  (let (%392 (Constant 0))
  (let (%393 (Gather %391 %392 0))
  (let (%394 (Shape %390))
  (let (%395 (Constant 1))
  (let (%396 (Gather %394 %395 0))
  (let (%398 (Unsqueeze %393 (vec 0)))
  (let (%399 (Unsqueeze %396 (vec 0)))
  (let (%401 (Concat %398 %399 %497 0))
  (let (%402 (Reshape %390 %401))
  (let (%404 (MatMul %402 %498))
  (let (%405 (Add %404 bert.encoder.layer.2.attention.output.dense.bias))
  (let (%406 (Add %405 %329))
  (let (%408 (ReduceMean %406 (vec -1) 1))
  (let (%409 (Sub %406 %408))
  (let (%410 (Cast_FLOAT %409))
  (let (%412 (Pow %410 %499))
  (let (%413 (ReduceMean %412 (vec -1) 1))
  (let (%414 (Constant 9.999999960041972e-13))
  (let (%415 (Add %413 %414))
  (let (%416 (Sqrt %415))
  (let (%417 (Div %409 %416))
  (let (%418 (Mul %417 bert.encoder.layer.2.attention.output.LayerNorm.weight))
  (let (%419 (Add %418 bert.encoder.layer.2.attention.output.LayerNorm.bias))
  (let (%421 (MatMul %419 %500))
  (let (%422 (Add %421 bert.encoder.layer.2.intermediate.dense.bias))
  (let (%423 (Constant 1.4142135381698608))
  (let (%424 (Div %422 %423))
  (let (%425 (Erf %424))
  (let (%426 (Constant 1.0))
  (let (%427 (Add %425 %426))
  (let (%428 (Mul %422 %427))
  (let (%429 (Constant 0.5))
  (let (%430 (Mul %428 %429))
  (let (%432 (MatMul %430 %501))
  (let (%433 (Add %432 bert.encoder.layer.2.output.dense.bias))
  (let (%434 (Add %433 %419))
  (let (%436 (ReduceMean %434 (vec -1) 1))
  (let (%437 (Sub %434 %436))
  (let (%438 (Cast_FLOAT %437))
  (let (%440 (Pow %438 %502))
  (let (%441 (ReduceMean %440 (vec -1) 1))
  (let (%442 (Constant 9.999999960041972e-13))
  (let (%443 (Add %441 %442))
  (let (%444 (Sqrt %443))
  (let (%445 (Div %437 %444))
  (let (%446 (Mul %445 bert.encoder.layer.2.output.LayerNorm.weight))
  (let (%447 (Add %446 bert.encoder.layer.2.output.LayerNorm.bias))
  (let (%449 (MatMul %447 %503))
  (let (%450 (Add %449 qa_outputs.bias))
  (let ((%451 %452) (Split %450 (vec 1 1) -1))
  (let (output_0 (Squeeze %451 (vec -1)))
  (let (output_1 (Squeeze %452 (vec -1)))
  output_1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(def main None ((input_ids : (Vec Integer)) (attention_mask : (Vec Integer)) (token_type_ids : (Vec Integer)))
  (torch-jit-export input_ids attention_mask token_type_ids))

