from ksc.parse_ks import parse_ks_filename

from ksc.expr import Def, EDef, GDef, Rule, Const, Var, Lam, Call, Let, If, Assert
from ksc.expr import pystr

from ksc.type_propagate import type_propagate_decls

# Pretty printing
# Importing prettyprint to get the decorated printers for Expression and Type
import ksc.prettyprint # pylint: disable=unused-import

# Import the prettyprinter routines we use explicitly in this file
from prettyprinter import cpprint, pprint, pformat

# Needed this in order to see the error messages when pprint fails
import warnings
warnings.filterwarnings("always")

#####################################################################

from functools import singledispatch

def pyname(s : str) -> str:
    return s.replace('$','_s')

def nl(indent):
    return "\n" + "  " * indent

def emit_intercomma(indent, exprs, body):
    return ", ".join([emit(ex, indent, body) for ex in exprs])

@singledispatch
def emit(expr, indent, body):
    """
    Expression to string, formatted in executable python syntax
    """
    # Default implementation, for types not specialized below
    return str(expr)

@emit.register(Def)
def _(ex, indent, body):
    indent += 1
    return "def " + pyname(ex.name) + "(" + emit_intercomma(indent, ex.args, body) + ") -> " \
           + pystr(ex.return_type, indent) + ":" \
           + nl(indent+1) + emit(ex.body, indent+1, "return ")

@emit.register(EDef)
def _(ex, indent, body):
    indent += 1
    return "#edef " + pyname(ex.name) + emit(ex.arg_type, indent, body) + ") -> "\
           + pystr(ex.return_type, indent) + nl(indent)

@emit.register(GDef)
def _(ex, indent, body):
    indent += 1
    return "#gdef " + pyname(ex.derivation) + " " + pyname(ex.function_name) + nl(indent)

@emit.register(Rule)
def _(ex, indent, body):
    indent += 1
    return "@rule\ndef " + pyname(ex.name) + " " + "(" + emit(ex.template_vars, indent, body) + ")" + ":" + nl(indent) \
           + emit(ex.template, indent +1, body) + nl(indent) \
           + "<===> " + nl(indent) \
           + emit(ex.replacement, indent +1, body)

@emit.register(Const)
def _(ex, indent, body):
    return body + repr(ex.value)

@emit.register(Var)
def _(ex, indent, body):
    if ex.decl:
        return pyname(ex.name) + ": " + pystr(ex.type_, indent)
    else:
        return body + pyname(ex.name)

@emit.register(Call)
def _(ex, indent, body):
    return body + pystr(ex, indent+1)

@emit.register(Lam)
def _(ex, indent, body):
    indent += 1
    return body + "lambda " + pyname(ex.arg.name) + ": " + nl(indent+1)\
                    + "(" + emit(ex.body, indent +1, "") + ")"

@emit.register(Let)
def _(ex, indent, body):
    return emit(ex.vars, indent, "") + " = " + emit(ex.rhs, indent +1, "") + nl(indent) \
         + emit(ex.body, indent, body)

@emit.register(If)
def _(ex, indent, body):
    return "(" + emit(ex.t_body, indent +2, "") + " if " +  emit(ex.cond, indent +1, "") + nl(indent+1) \
               + " else " + emit(ex.f_body, indent +1, "") + ")\n"

@emit.register(Assert)
def _(ex, indent, body):
    return "assert " + emit(ex.cond, indent, "") + nl(indent) \
            + emit(ex.body, indent, body)


import sys
import argparse

def main():
    parser = argparse.ArgumentParser(prog="ks2py", description=__doc__)
    parser.add_argument("input_ks_file", type=str, default="test/ksc/ex6.ks", nargs="?")
    parser.add_argument("out_py_file", type=str, default="/tmp/t.py", nargs="?")
    args = parser.parse_args()

    symtab = dict()
    decls_prelude = list(parse_ks_filename("src/runtime/prelude.ks"))
    type_propagate_decls(decls_prelude, symtab)
    decls_file = list(parse_ks_filename(args.input_ks_file))
    type_propagate_decls(decls_file, symtab)

    with open(args.out_py_file, "w") as fo:
        print(f"# AUTOGENERATED from {args.input_ks_file}", file=fo)
        print("from ksc.pyruntime import Integer", file=fo)
        for x in decls_file:
            cpprint(x)
            print(emit(x, 0, ""), "\n", file=fo)
        print("""
if __name__ == "__main__":
    main()
""", file=fo)

if __name__ == "__main__":
    sys.exit(main())

