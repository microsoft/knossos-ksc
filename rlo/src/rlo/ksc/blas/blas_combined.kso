; This is a superset of blas_train.kso and blas_test.kso and contains
; optimization opportunities for
;    - function inlining,
;    - let-inlining,
;    - index-of-build
; See test/dataset/test_blas_combined_dataset.py for the correctness

; EXPERT blas

; BEST ml_rules_no_bind add_index_scal rlo blas_combined_ray-20200815-1 ; [[48, "inline_let"], [57, "inline_call"], [0, "delete_let"], [26, "inline_let"], [19, "delete_let"], [31, "inline_let"], [14, "delete_let"], [54, "inline_let"], [4, "delete_let"], [24, "inline_let"], [4, "delete_let"], [25, "inline_let"], [24, "select_of_tuple"], [35, "inline_let"], [30, "inline_let"], [29, "select_of_tuple"], [42, "inline_let"], [27, "delete_let"], [13, "delete_let"], [33, "inline_let"], [13, "delete_let"], [20, "inline_let"], [13, "delete_let"], [11, "index_of_build"], [19, "inline_let"], [11, "delete_let"]]
; BEST ml_rules_no_bind amxmxpb rlo blas_combined_ray-20200815-1 ; [[22, "inline_let"], [30, "inline_let"], [46, "inline_let"], [53, "inline_let"], [9, "delete_let"], [59, "commute_mul"], [72, "commute_add"], [65, "inline_let"], [9, "delete_let"], [70, "inline_let"], [4, "delete_let"], [21, "inline_let"], [47, "inline_let"], [65, "inline_let"], [4, "delete_let"], [21, "inline_let"], [80, "inline_let"], [78, "index_of_build"], [43, "delete_let"], [68, "inline_let"], [58, "delete_let"], [56, "index_of_build"], [61, "inline_let"], [56, "delete_let"], [61, "inline_let"], [59, "index_of_build"], [12, "delete_let"], [43, "inline_let"], [50, "inline_let"], [28, "delete_let"], [26, "index_of_build"], [31, "inline_let"], [38, "inline_let"], [26, "delete_let"]]
; BEST ml_rules_no_bind amxmy expert fa642a96 ; [[104, "inline_call"], [0, "delete_let"], [71, "inline_call"], [0, "delete_let"], [31, "inline_let"], [30, "select_of_tuple"], [34, "inline_let"], [23, "delete_let"], [28, "select_of_tuple"], [32, "inline_let"], [36, "inline_let"], [42, "inline_let"], [44, "inline_let"], [29, "delete_let"], [54, "inline_let"], [26, "delete_let"], [56, "inline_let"], [23, "delete_let"], [57, "inline_let"], [56, "select_of_tuple"], [90, "inline_let"], [19, "delete_let"], [54, "select_of_tuple"], [58, "inline_let"], [73, "inline_let"], [62, "delete_let"], [73, "inline_let"], [58, "delete_let"], [57, "size_of_build"], [64, "inline_let"], [79, "inline_let"], [68, "delete_let"], [79, "inline_let"], [64, "delete_let"], [62, "index_of_build"], [79, "inline_let"], [62, "delete_let"], [61, "size_of_build"], [66, "inline_let"], [55, "delete_let"], [69, "inline_let"], [52, "delete_let"], [71, "inline_let"], [19, "delete_let"], [53, "inline_let"], [42, "delete_let"], [53, "inline_let"], [38, "delete_let"], [36, "index_of_build"], [53, "inline_let"], [36, "delete_let"], [34, "index_of_build"], [48, "inline_let"], [34, "delete_let"]]
; BEST ml_rules_no_bind amxmy rlo 2021-01-13-12-01-39_blas_combined ; [[54, "inline_let"], [106, "inline_call"], [0, "delete_let"], [39, "commute_mul"], [76, "inline_let"], [79, "inline_let"], [72, "inline_let"], [105, "inline_let"], [106, "inline_let"], [113, "commute_mul"], [103, "inline_let"], [94, "delete_let"], [116, "inline_let"], [23, "inline_let"], [66, "delete_let"], [56, "delete_let"], [111, "inline_let"], [81, "delete_let"], [56, "delete_let"], [62, "inline_call"], [79, "inline_let"], [78, "select_of_tuple"], [74, "inline_let"], [33, "inline_let"], [127, "inline_let"], [42, "inline_let"], [47, "commute_mul"], [155, "commute_mul"], [39, "inline_let"], [158, "commute_mul"], [0, "delete_let"], [45, "inline_let"], [39, "inline_let"], [10, "delete_let"], [29, "select_of_tuple"], [51, "inline_let"], [26, "delete_let"], [21, "delete_let"], [12, "select_of_tuple"], [50, "inline_let"], [18, "select_of_tuple"], [54, "delete_let"], [39, "commute_mul"], [26, "inline_let"], [10, "delete_let"]]
; BEST ml_rules_no_bind amxpamy rlo blas_combined_ray-20200815-1 ; [[70, "inline_let"], [87, "inline_let"], [91, "inline_let"], [85, "index_of_build"], [68, "index_of_build"], [22, "inline_let"], [94, "commute_mul"], [82, "inline_let"], [76, "commute_mul"], [30, "inline_let"], [96, "inline_let"], [47, "inline_let"], [9, "delete_let"], [66, "commute_add"], [45, "delete_let"], [65, "commute_mul"], [80, "commute_mul"], [51, "commute_add"], [88, "inline_let"], [4, "delete_let"], [82, "inline_let"], [66, "delete_let"], [55, "commute_mul"], [64, "index_of_build"], [23, "delete_let"], [53, "inline_let"], [29, "commute_add"], [30, "delete_let"], [51, "inline_let"], [41, "delete_let"], [39, "index_of_build"], [31, "inline_let"], [44, "commute_mul"], [45, "inline_let"], [4, "delete_let"], [44, "inline_let"], [36, "delete_let"], [24, "commute_add"], [24, "add_of_muls"], [19, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind amxpmy rlo blas_combined_ray-20200815-1 ; [[22, "inline_let"], [57, "inline_let"], [55, "index_of_build"], [31, "delete_let"], [52, "inline_let"], [51, "inline_let"], [40, "delete_let"], [38, "index_of_build"], [30, "inline_let"], [9, "delete_let"], [41, "inline_let"], [29, "inline_let"], [14, "delete_let"], [32, "delete_let"], [33, "inline_let"], [9, "delete_let"], [42, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind apbvx rlo blas_combined_ray-20200815-1 ; [[22, "inline_let"], [31, "inline_let"], [9, "delete_let"], [31, "inline_let"], [4, "delete_let"], [30, "inline_let"], [36, "inline_let"], [4, "delete_let"], [36, "inline_let"], [10, "delete_let"], [20, "index_of_build"], [4, "delete_let"], [22, "inline_let"], [14, "delete_let"]]
; BEST ml_rules_no_bind asum expert 7b4c517f ; [[9, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind avxpavy rlo blas_combined_ray-20200815-1 ; [[49, "inline_let"], [23, "delete_let"], [37, "index_of_build"], [22, "inline_let"], [28, "inline_let"], [37, "inline_let"], [4, "delete_let"], [46, "inline_let"], [4, "delete_let"], [40, "inline_let"], [34, "delete_let"], [31, "inline_let"], [9, "delete_let"], [18, "inline_let"], [34, "inline_let"], [4, "delete_let"], [39, "inline_let"], [4, "delete_let"], [20, "index_of_build"], [28, "inline_let"], [20, "delete_let"], [10, "add_of_muls"]]
; BEST ml_rules_no_bind avxvxpb rlo blas_combined_ray-20200815-1 ; [[51, "inline_let"], [49, "index_of_build"], [22, "inline_let"], [37, "delete_let"], [33, "inline_let"], [38, "inline_let"], [9, "delete_let"], [46, "inline_let"], [40, "delete_let"], [41, "inline_let"], [9, "delete_let"], [42, "inline_let"], [4, "delete_let"], [27, "inline_let"], [39, "inline_let"], [10, "delete_let"], [21, "index_of_build"], [4, "delete_let"], [20, "inline_let"], [25, "inline_let"], [15, "delete_let"]]
; BEST ml_rules_no_bind axpy rlo blas_combined_ray-20200815-1 ; [[22, "inline_let"], [9, "delete_let"], [48, "inline_call"], [0, "delete_let"], [28, "inline_let"], [14, "delete_let"], [55, "inline_let"], [4, "delete_let"], [12, "inline_let"], [23, "inline_let"], [4, "delete_let"], [43, "commute_add"], [24, "inline_let"], [23, "select_of_tuple"], [29, "inline_let"], [41, "inline_let"], [21, "delete_let"], [40, "inline_let"], [4, "delete_let"], [22, "inline_let"], [15, "delete_let"], [23, "inline_let"], [6, "delete_let"], [13, "select_of_tuple"], [35, "inline_let"], [4, "delete_let"], [16, "index_of_build"], [24, "inline_let"], [16, "delete_let"]]
; BEST ml_rules_no_bind dot rlo blas_combined_ray-20200815-1 ; [[17, "inline_let"], [21, "inline_let"], [14, "delete_let"], [23, "inline_let"], [9, "delete_let"], [23, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind float_matrix_multiply rlo blas_combined_ray-20200815-1  ; [[17, "inline_let"], [25, "inline_let"], [29, "inline_let"], [14, "delete_let"], [32, "inline_let"], [9, "delete_let"], [34, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind gemm expert fa642a96 ; [[155, "inline_call"], [85, "delete_let"], [117, "inline_call"], [121, "inline_call"], [37, "delete_let"], [155, "inline_call"], [0, "delete_let"], [44, "inline_let"], [43, "select_of_tuple"], [47, "inline_let"], [36, "delete_let"], [41, "select_of_tuple"], [45, "inline_let"], [49, "inline_let"], [55, "inline_let"], [57, "inline_let"], [42, "delete_let"], [67, "inline_let"], [39, "delete_let"], [69, "inline_let"], [36, "delete_let"], [70, "inline_let"], [69, "select_of_tuple"], [103, "inline_let"], [32, "delete_let"], [67, "select_of_tuple"], [71, "inline_let"], [86, "inline_let"], [75, "delete_let"], [86, "inline_let"], [71, "delete_let"], [70, "size_of_build"], [77, "inline_let"], [92, "inline_let"], [81, "delete_let"], [92, "inline_let"], [77, "delete_let"], [75, "index_of_build"], [92, "inline_let"], [75, "delete_let"], [74, "size_of_build"], [79, "inline_let"], [68, "delete_let"], [82, "inline_let"], [65, "delete_let"], [84, "inline_let"], [32, "delete_let"], [66, "inline_let"], [55, "delete_let"], [66, "inline_let"], [51, "delete_let"], [49, "index_of_build"], [66, "inline_let"], [49, "delete_let"], [47, "index_of_build"], [61, "inline_let"], [47, "delete_let"], [70, "inline_let"], [69, "select_of_tuple"], [73, "inline_let"], [62, "delete_let"], [67, "select_of_tuple"], [71, "inline_let"], [77, "inline_let"], [79, "inline_let"], [68, "delete_let"], [82, "inline_let"], [65, "delete_let"], [84, "inline_let"], [62, "delete_let"], [85, "inline_let"], [84, "select_of_tuple"], [107, "inline_let"], [29, "delete_let"], [53, "select_of_tuple"], [86, "inline_let"], [97, "inline_let"], [86, "delete_let"], [85, "size_of_build"], [92, "inline_let"], [103, "inline_let"], [92, "delete_let"], [90, "index_of_build"], [109, "inline_let"], [90, "delete_let"], [89, "size_of_build"], [94, "inline_let"], [83, "delete_let"], [101, "inline_let"], [51, "delete_let"], [80, "inline_let"], [69, "delete_let"], [67, "index_of_build"], [86, "inline_let"], [67, "delete_let"], [65, "index_of_build"], [81, "inline_let"], [65, "delete_let"], [86, "inline_let"], [29, "delete_let"], [75, "inline_let"], [64, "delete_let"], [62, "index_of_build"], [76, "inline_let"], [62, "delete_let"], [60, "index_of_build"], [66, "inline_let"], [60, "delete_let"]]
; BEST ml_rules_no_bind gemm rlo blas_combined_20210111-5 ; [[155, "inline_call"], [158, "inline_call"], [200, "inline_call"], [162, "inline_call"], [85, "delete_let"], [0, "delete_let"], [87, "inline_let"], [67, "delete_let"], [166, "inline_let"], [57, "delete_let"], [0, "delete_let"], [186, "inline_let"], [150, "delete_let"], [116, "inline_let"], [4, "delete_let"], [20, "inline_let"], [9, "delete_let"], [170, "inline_let"], [96, "inline_let"], [74, "delete_let"], [135, "inline_let"], [113, "delete_let"], [83, "inline_let"], [100, "inline_let"], [77, "inline_let"], [69, "delete_let"], [24, "inline_let"], [4, "delete_let"], [120, "inline_let"], [137, "inline_let"], [114, "inline_let"], [106, "delete_let"], [151, "inline_let"], [145, "inline_let"], [137, "delete_let"], [35, "inline_let"], [62, "inline_let"], [27, "delete_let"], [42, "inline_let"], [66, "inline_let"], [36, "inline_let"], [22, "delete_let"]]
; BEST ml_rules_no_bind gemm rlo 2021-01-13-12-01-39_blas_combined ; [[58, "inline_let"], [112, "inline_let"], [168, "inline_let"], [171, "inline_let"], [110, "inline_let"], [180, "inline_let"], [179, "inline_let"], [101, "delete_let"], [131, "delete_let"], [136, "delete_let"], [76, "commute_mul"], [17, "inline_let"], [27, "inline_let"], [73, "inline_let"], [36, "inline_let"], [73, "inline_let"], [86, "commute_mul"], [141, "delete_let"], [157, "inline_let"], [9, "delete_let"], [38, "inline_let"], [20, "inline_let"], [140, "delete_let"], [32, "commute_mul"], [9, "delete_let"], [54, "inline_let"], [26, "commute_mul"], [141, "inline_call"], [92, "delete_let"], [91, "inline_let"], [98, "delete_let"], [4, "delete_let"], [68, "inline_let"], [152, "inline_let"], [142, "inline_let"], [161, "inline_let"], [127, "delete_let"], [122, "delete_let"], [78, "commute_mul"], [98, "inline_call"], [46, "delete_let"], [84, "inline_let"], [41, "delete_let"], [36, "delete_let"], [153, "commute_add"], [127, "inline_call"], [0, "delete_let"], [58, "inline_call"], [0, "delete_let"]]
; BEST ml_rules_no_bind gemv expert fa642a96 ; [[51, "inline_call"], [149, "delete_let"], [149, "inline_call"], [26, "delete_let"], [94, "inline_call"], [26, "delete_let"], [97, "inline_call"], [0, "delete_let"], [38, "inline_let"], [29, "delete_let"], [47, "inline_let"], [46, "select_of_tuple"], [50, "inline_let"], [37, "delete_let"], [42, "select_of_tuple"], [50, "inline_let"], [45, "delete_let"], [55, "inline_let"], [37, "delete_let"], [61, "inline_let"], [60, "select_of_tuple"], [64, "inline_let"], [53, "delete_let"], [58, "select_of_tuple"], [62, "inline_let"], [64, "inline_let"], [59, "delete_let"], [64, "inline_let"], [56, "delete_let"], [64, "inline_let"], [53, "delete_let"], [65, "inline_let"], [64, "select_of_tuple"], [76, "inline_let"], [75, "select_of_tuple"], [98, "inline_let"], [29, "delete_let"], [64, "select_of_tuple"], [68, "inline_let"], [67, "size_of_build"], [74, "inline_let"], [62, "delete_let"], [72, "inline_let"], [40, "delete_let"], [73, "inline_let"], [72, "select_of_tuple"], [95, "inline_let"], [46, "delete_let"], [70, "select_of_tuple"], [74, "inline_let"], [73, "size_of_build"], [76, "inline_let"], [71, "delete_let"], [76, "inline_let"], [68, "delete_let"], [76, "inline_let"], [46, "delete_let"], [52, "index_of_build"], [58, "inline_let"], [52, "delete_let"], [69, "inline_let"], [40, "delete_let"], [71, "inline_let"], [40, "delete_let"], [45, "index_of_build"], [53, "inline_let"], [45, "delete_let"], [65, "inline_let"], [29, "delete_let"], [52, "index_of_build"], [58, "inline_let"], [52, "delete_let"]]
; BEST ml_rules_no_bind gemv rlo blas_combined_20210112-3 ; [[55, "inline_let"], [142, "inline_call"], [68, "delete_let"], [145, "inline_call"], [25, "inline_let"], [22, "inline_let"], [55, "inline_call"], [137, "inline_call"], [131, "delete_let"], [143, "inline_let"], [0, "delete_let"], [64, "inline_let"], [23, "delete_let"], [41, "delete_let"], [207, "inline_let"], [224, "inline_let"], [55, "inline_let"], [183, "delete_let"], [199, "inline_let"], [56, "inline_let"], [157, "inline_let"], [222, "select_of_tuple"], [209, "delete_let"], [130, "inline_let"], [48, "commute_mul"], [125, "delete_let"], [218, "inline_let"], [132, "inline_let"], [48, "commute_mul"], [65, "inline_let"], [4, "delete_let"], [126, "commute_mul"], [216, "select_of_tuple"], [208, "inline_let"], [124, "inline_let"], [145, "inline_let"], [167, "inline_let"], [146, "inline_let"], [226, "inline_let"], [215, "delete_let"], [45, "inline_let"], [34, "inline_let"], [150, "delete_let"], [165, "inline_let"], [200, "delete_let"], [200, "delete_let"], [198, "index_of_build"], [170, "select_of_tuple"]]
; BEST ml_rules_no_bind ger expert fa642a96 ; [[137, "inline_call"], [37, "delete_let"], [99, "inline_call"], [0, "delete_let"], [66, "inline_call"], [0, "delete_let"], [39, "inline_let"], [38, "select_of_tuple"], [42, "inline_let"], [31, "delete_let"], [36, "select_of_tuple"], [40, "inline_let"], [44, "inline_let"], [46, "inline_let"], [37, "delete_let"], [51, "inline_let"], [34, "delete_let"], [51, "inline_let"], [31, "delete_let"], [52, "inline_let"], [51, "select_of_tuple"], [72, "inline_let"], [27, "delete_let"], [49, "select_of_tuple"], [53, "inline_let"], [62, "inline_let"], [53, "delete_let"], [52, "size_of_build"], [59, "inline_let"], [68, "inline_let"], [59, "delete_let"], [57, "index_of_build"], [66, "inline_let"], [57, "delete_let"], [56, "size_of_build"], [59, "inline_let"], [50, "delete_let"], [62, "inline_let"], [47, "delete_let"], [64, "inline_let"], [27, "delete_let"], [53, "inline_let"], [44, "delete_let"], [42, "index_of_build"], [51, "inline_let"], [42, "delete_let"], [40, "index_of_build"], [48, "inline_let"], [40, "delete_let"], [51, "inline_let"], [50, "select_of_tuple"], [54, "inline_let"], [24, "delete_let"], [29, "select_of_tuple"], [52, "inline_let"], [61, "inline_let"], [52, "delete_let"], [51, "size_of_build"], [58, "inline_let"], [67, "inline_let"], [58, "delete_let"], [56, "index_of_build"], [67, "inline_let"], [56, "delete_let"], [55, "size_of_build"], [58, "inline_let"], [49, "delete_let"], [65, "inline_let"], [27, "delete_let"], [52, "inline_let"], [43, "delete_let"], [41, "index_of_build"], [52, "inline_let"], [41, "delete_let"], [39, "index_of_build"], [49, "inline_let"], [39, "delete_let"], [52, "inline_let"], [24, "delete_let"]]
; BEST ml_rules_no_bind matrix_matrix_add rlo blas_combined_ray-20200815-1  ; [[17, "inline_let"], [25, "inline_let"], [29, "inline_let"], [14, "delete_let"], [36, "inline_let"], [9, "delete_let"], [38, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind matrix_matrix_multiply rlo blas_combined_ray-20200815-1  ; [[17, "inline_let"], [23, "inline_let"], [31, "inline_let"], [35, "inline_let"], [14, "delete_let"], [45, "inline_let"], [9, "delete_let"], [47, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind nrm2 expert 7b4c517f ; [[35, "inline_call"], [0, "delete_let"], [15, "inline_let"], [14, "select_of_tuple"], [18, "inline_let"], [7, "delete_let"], [12, "select_of_tuple"], [16, "inline_let"], [18, "inline_let"], [13, "delete_let"], [20, "inline_let"], [10, "delete_let"], [20, "inline_let"], [7, "delete_let"]]
; BEST ml_rules_no_bind outer_product rlo blas_combined_ray-20200815-1  ; [[17, "inline_let"], [23, "inline_let"], [27, "inline_let"], [14, "delete_let"], [32, "inline_let"], [9, "delete_let"], [32, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind rot rlo blas_combined_ray-20200815-1  ; [[38, "commute_mul"], [50, "inline_let"], [34, "inline_let"], [48, "commute_add"], [43, "inline_let"], [51, "commute_mul"], [27, "inline_let"], [35, "commute_mul"], [52, "commute_add"], [66, "inline_let"], [9, "delete_let"], [33, "inline_let"], [50, "commute_mul"], [50, "mul_by_sub"], [56, "commute_mul"], [30, "commute_mul"], [51, "commute_mul"], [51, "mul_zero"], [52, "commute_mul"], [59, "commute_mul"], [49, "assoc_add_sub"], [50, "add_zero"], [30, "commute_mul"], [60, "inline_let"], [14, "delete_let"], [24, "commute_add"], [51, "inline_let"], [9, "delete_let"], [40, "commute_mul"], [26, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind rscl expert fa642a96 ; [[9, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind scal rlo blas_combined_ray-20200815-1  ; [[17, "inline_let"], [21, "inline_let"], [14, "delete_let"], [21, "inline_let"], [9, "delete_let"], [21, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind syr2 expert fa642a96 ; [[137, "inline_call"], [140, "inline_call"], [144, "inline_call"], [213, "inline_call"], [37, "delete_let"], [175, "inline_call"], [0, "delete_let"], [142, "inline_call"], [0, "delete_let"], [39, "inline_let"], [38, "select_of_tuple"], [42, "inline_let"], [31, "delete_let"], [36, "select_of_tuple"], [40, "inline_let"], [44, "inline_let"], [46, "inline_let"], [37, "delete_let"], [51, "inline_let"], [34, "delete_let"], [51, "inline_let"], [31, "delete_let"], [52, "inline_let"], [51, "select_of_tuple"], [72, "inline_let"], [27, "delete_let"], [49, "select_of_tuple"], [53, "inline_let"], [62, "inline_let"], [53, "delete_let"], [52, "size_of_build"], [59, "inline_let"], [68, "inline_let"], [59, "delete_let"], [57, "index_of_build"], [66, "inline_let"], [57, "delete_let"], [56, "size_of_build"], [59, "inline_let"], [50, "delete_let"], [62, "inline_let"], [47, "delete_let"], [64, "inline_let"], [27, "delete_let"], [53, "inline_let"], [44, "delete_let"], [42, "index_of_build"], [51, "inline_let"], [42, "delete_let"], [40, "index_of_build"], [48, "inline_let"], [40, "delete_let"], [62, "inline_let"], [61, "select_of_tuple"], [65, "inline_let"], [54, "delete_let"], [59, "select_of_tuple"], [63, "inline_let"], [67, "inline_let"], [69, "inline_let"], [60, "delete_let"], [74, "inline_let"], [57, "delete_let"], [74, "inline_let"], [54, "delete_let"], [75, "inline_let"], [74, "select_of_tuple"], [95, "inline_let"], [50, "delete_let"], [72, "select_of_tuple"], [76, "inline_let"], [85, "inline_let"], [76, "delete_let"], [75, "size_of_build"], [82, "inline_let"], [91, "inline_let"], [82, "delete_let"], [80, "index_of_build"], [89, "inline_let"], [80, "delete_let"], [79, "size_of_build"], [82, "inline_let"], [73, "delete_let"], [85, "inline_let"], [70, "delete_let"], [87, "inline_let"], [50, "delete_let"], [76, "inline_let"], [67, "delete_let"], [65, "index_of_build"], [74, "inline_let"], [65, "delete_let"], [63, "index_of_build"], [71, "inline_let"], [63, "delete_let"], [74, "inline_let"], [73, "select_of_tuple"], [77, "inline_let"], [47, "delete_let"], [52, "select_of_tuple"], [75, "inline_let"], [84, "inline_let"], [75, "delete_let"], [74, "size_of_build"], [81, "inline_let"], [90, "inline_let"], [81, "delete_let"], [79, "index_of_build"], [90, "inline_let"], [79, "delete_let"], [78, "size_of_build"], [81, "inline_let"], [72, "delete_let"], [88, "inline_let"], [50, "delete_let"], [75, "inline_let"], [66, "delete_let"], [64, "index_of_build"], [75, "inline_let"], [64, "delete_let"], [62, "index_of_build"], [72, "inline_let"], [62, "delete_let"], [75, "inline_let"], [47, "delete_let"], [76, "inline_let"], [75, "select_of_tuple"], [104, "inline_let"], [24, "delete_let"], [54, "select_of_tuple"], [77, "inline_let"], [86, "inline_let"], [77, "delete_let"], [76, "size_of_build"], [83, "inline_let"], [92, "inline_let"], [83, "delete_let"], [81, "index_of_build"], [92, "inline_let"], [81, "delete_let"], [80, "size_of_build"], [83, "inline_let"], [74, "delete_let"], [90, "inline_let"], [52, "delete_let"], [77, "inline_let"], [68, "delete_let"], [66, "index_of_build"], [77, "inline_let"], [66, "delete_let"], [64, "index_of_build"], [74, "inline_let"], [64, "delete_let"], [77, "inline_let"], [24, "delete_let"], [58, "inline_let"], [49, "delete_let"], [47, "index_of_build"], [59, "inline_let"], [67, "inline_let"], [47, "delete_let"], [45, "index_of_build"], [56, "inline_let"], [59, "inline_let"], [45, "delete_let"]]
; BEST ml_rules_no_bind trmv rlo blas_combined_ray-20200815-1  ; [[17, "inline_let"], [25, "inline_let"], [29, "inline_let"], [14, "delete_let"], [43, "inline_let"], [9, "delete_let"], [43, "inline_let"], [4, "delete_let"]]
; BEST ml_rules_no_bind vector_vector_add rlo blas_combined_ray-20200815-1  ; [[17, "inline_let"], [21, "inline_let"], [14, "delete_let"], [23, "inline_let"], [9, "delete_let"], [23, "inline_let"], [4, "delete_let"]]


(edef abs Float (Float))
(def cost$abs Float (x : Float) 2.0)
(edef pow Float (Tuple Float Float))
(def cost$pow Float ((x : Float) (p : Float)) 10.0)

(def
 float_matrix_multiply (Vec (Vec Float))
 ((alpha : Float) (mat_x : (Vec (Vec Float))))
 (let (m (size mat_x)) (let (n (size (index 0 mat_x)))
   (build m (lam (i : Integer)
     (build n (lam (j : Integer)
       (mul alpha (index j (index i mat_x))))))))))

(def
 matrix_matrix_multiply (Vec (Vec Float))
 ((mat_x : (Vec (Vec Float))) (mat_y : (Vec (Vec Float))))
 (let (l (size mat_x)) (let (m (size mat_y)) (let (n (size (index 0 mat_y)))
   (build l (lam (i : Integer)
     (build n (lam (k : Integer)
       (sumbuild m (lam (j : Integer)
         (mul (index j (index i mat_x))
                 (index k (index j mat_y)))))))))))))

(def
 vector_vector_add (Vec Float)
 ((x : (Vec Float)) (y : (Vec Float)))
 (let (n (size x))
 (build n (lam (i : Integer) (add (index i x) (index i y))))))

(def
 matrix_matrix_add (Vec (Vec Float))
 ((mat_x : (Vec (Vec Float))) (mat_y : (Vec (Vec Float))))
 (let (m (size mat_x)) (let (n (size (index 0 mat_x)))
   (build m (lam (i : Integer)
     (build n (lam (j : Integer)
       (add (index j (index i mat_x)) (index j (index i mat_y))))))))))

(def
 outer_product (Vec (Vec Float))
 ((x : (Vec Float)) (y : (Vec Float)))
 (let (m (size x)) (let (n (size y))
   (build m (lam (i : Integer)
     (build n (lam (j : Integer)
       (mul (index i x) (index j y)))))))))

(def
 scal (Vec Float)
 ((a : Float) (x : (Vec Float)))
 (let (n (size x))
 (build n (lam (i : Integer) (mul a (index i x))))))

; computes a * x + y
(def axpy (Vec Float)
   ((a : Float)
    (x : (Vec Float))
    (y : (Vec Float)))
 (let (n (size x))
  (let (ax (scal a x))
   (build n (lam (i : Integer)
     (add (index i ax) (index i y)))))))

; same as axpy but scal already moved inside build
(def add_index_scal (Vec Float)
    ((a : Float)
     (x : (Vec Float))
     (y : (Vec Float)))
 (let (n (size x))
   (build n (lam (i : Integer)
     (add (index i (scal a x)) (index i y))))))

(def
 dot Float
 ((x : (Vec Float)) (y : (Vec Float)))
 (let (n (size x))
 (sumbuild n
           (lam (i : Integer) (mul (index i x) (index i y))))))
(def
 rscl (Vec Float)
 ((x : (Vec Float)))
 (let (n (size x))
 (build n (lam (i : Integer) (div (index i x) (sum x))))))

(def
 rot (Tuple (Vec Float) (Vec Float))
 ((x : (Vec Float)) (y : (Vec Float)) (c : Float) (s : Float))
 (let (n (size x))
 (tuple (build n
               (lam (i : Integer) (add (mul c (index i x)) (mul s (index i y)))))
        (build n
               (lam (i : Integer) (add (mul (neg s) (index i x))
                                     (mul c (index i y))))))))

(def
 nrm2 Float ((x : (Vec Float)))
 (pow (dot x x) 0.5)
)

(def
 asum Float ((x : (Vec Float)))
 (let (n (size x))
  (sumbuild n (lam (i : Integer) (abs (index i x))))
 )
)

(def gemv (Vec Float)
    ((alpha : Float) (a : (Vec (Vec Float))) (x : (Vec Float)) (beta : Float) (y : (Vec Float)))
    (let (m (size a)) (let (n (size (index 0 a)))
      (axpy alpha
            (build m (lam (i : Integer) (dot (index i a) x)))
            (scal beta y)
      )
    ))
)

(def trmv (Vec Float)
    ((a : (Vec (Vec Float))) (x : (Vec Float)))
    (let (m (size a)) (let (n (size (index 0 a)))
    (build m (lam (i : Integer) (sumbuild (sub n i) (lam (j : Integer)
      (let (j1 (add j i))
        (mul (index j1 (index i a)) (index j1 x)))))))
      )
))

(def ger (Vec (Vec Float))
    ((alpha : Float) (x : (Vec Float)) (y : (Vec Float)) (a : (Vec (Vec Float))))
    (matrix_matrix_add (float_matrix_multiply alpha (outer_product x y)) a)
)

(def syr2 (Vec (Vec Float))
    ((alpha : Float) (x : (Vec Float)) (y : (Vec Float)) (a : (Vec (Vec Float))))
    (matrix_matrix_add 
      (float_matrix_multiply alpha (outer_product x y))
      (matrix_matrix_add (float_matrix_multiply alpha (outer_product y x)) a)
    )
)

(def gemm (Vec (Vec Float))
 ((alpha : Float)
  (a : (Vec (Vec Float)))
  (b : (Vec (Vec Float)))
  (beta : Float)
  (c : (Vec (Vec Float))))
  (matrix_matrix_add
    (float_matrix_multiply alpha (matrix_matrix_multiply a b))
    (float_matrix_multiply beta c)
  )
)

; computes a * mx * my
(def amxmy (Vec (Vec Float))
  ((alpha : Float)
   (mx : (Vec (Vec Float)))
   (my : (Vec (Vec Float))))
  (float_matrix_multiply alpha (matrix_matrix_multiply mx my))
)

; computes a + b * vx
(def apbvx (Vec Float)
    ((a : Float)
     (b : Float)
     (vx : (Vec Float)))
 (let (n (size vx))
    (let (bvx (build n (lam (j : Integer) (mul b (index j vx)))))
 (build n (lam (i : Integer) (add a (index i bvx)))))))

; computes a * vx + a * vy
(def avxpavy (Vec Float)
    ((a : Float)
     (vx : (Vec Float))
     (vy : (Vec Float)))
 (let (n (size vx))
  (let (x2 (build n (lam (i : Integer) (mul a (index i vx)))))
   (let (y2 (build n (lam (i : Integer) (mul a (index i vy))))) ; Two independent intermediates
    (build n (lam (i : Integer) (add (index i x2) (index i y2))))))))

; computes a * vx ** 2 + b
(def avxvxpb (Vec Float)
    ((a : Float)
     (vx : (Vec Float))
     (b : Float))
  (let (n (size vx))
   (let (squared_vec (build n (lam (i : Integer) (mul (index i vx) (index i vx)))))
    (let (scaled_sq (build n (lam (i : Integer) (mul a (index i squared_vec))))) ; Intermediate dependent on previous
     (build n (lam (i : Integer) (add (index i scaled_sq) b)))))))

; computex a * mx + my
(def amxpmy (Vec (Vec Float))
    ((a : Float)
     (mx : (Vec (Vec Float)))
     (my : (Vec (Vec Float))))
 (let (m (size mx))
   (let (n (size (index 0 mx)))
    (let (temp (build m (lam (i : Integer)
               (build n (lam (j : Integer)
                 (mul a (index j (index i mx))))))))
   (build m (lam (i : Integer)
     (build n (lam (j : Integer)
       (add (index j (index i temp)) (index j (index i my)))))))))))

; computes a * mx + a * my
(def amxpamy (Vec (Vec Float))
    ((a : Float)
     (mx : (Vec (Vec Float)))
     (my : (Vec (Vec Float))))
 (let (m (size mx))
  (let (n (size (index 0 mx)))
   (let (x2 (build m (lam (i : Integer) (build n (lam (j : Integer) (mul a (index j (index i mx))))))))
    (let (y2 (build m (lam (i : Integer) (build n (lam (j : Integer) (mul a (index j (index i my)))))))) ; Two independent intermediates
  (build m (lam (i : Integer)
    (build n (lam (j : Integer)
      (add (index j (index i x2)) (index j (index i y2))))))))))))


; computes a * mx ** 2 + b
(def amxmxpb (Vec (Vec Float))
    ((a : Float)
     (mx : (Vec (Vec Float)))
     (b : Float))
  (let (m (size mx))
   (let (n (size (index 0 mx)))
    (let (squared_mat (build m (lam (i : Integer) (build n (lam (j : Integer) (mul (index j (index i mx)) (index j (index i mx))))))))
     (let (scaled_sq (build m (lam (i : Integer) (build n (lam (j : Integer) (mul a (index j (index i squared_mat)))))))) ; Intermediate dependent on previous
    (build m (lam (i : Integer) (build n (lam (j : Integer) (add (index j (index i scaled_sq)) b))))))))))
