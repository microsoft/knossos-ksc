(edef MatMul (Vec (Vec Float)) ((Vec (Vec Float)) (Vec (Vec Float))))
(edef BroadcastAdd (Vec (Vec Float)) ((Vec (Vec Float)) (Vec Float)))
(edef Transpose (Vec (Vec Float)) ((Vec (Vec Float))))
(edef Relu (Vec (Vec Float)) (Vec (Vec Float)))
(edef LogSoftmax (Vec (Vec Float)) (Vec (Vec Float)))
(edef ones (Vec Float) ((len : Integer)))
(edef ones_2d (Vec (Vec Float)) ((len1 : Integer) (len2 : Integer)))

(def Dense (Vec (Vec Float))
    ((weights : (Tuple (Vec (Vec Float)) (Vec Float)))
      (input : (Vec (Vec Float))))
  (let ((W (get$1$2 weights))
        (b (get$2$2 weights)))
    (BroadcastAdd (MatMul input (Transpose W)) b))
)

(def DenseAndRelu (Vec (Vec Float))
    ((weights : (Tuple (Vec (Vec Float)) (Vec Float)))
      (input : (Vec (Vec Float))))
  (Relu (Dense weights input))
)

(def MLP (Vec (Vec Float))
    ((weights : (Tuple (Tuple (Vec (Vec Float)) (Vec Float))
                       (Tuple (Vec (Vec Float)) (Vec Float))))
     (input : (Vec (Vec Float))))
  (let ((weights_1 (get$1$2 weights))
        (weights_2 (get$2$2 weights)))
    (LogSoftmax (DenseAndRelu weights_2 (DenseAndRelu weights_1 input)))
  )
)

(def test_MLP (Vec (Vec Float)) ()
  (let ((wts (tuple (tuple (ones_2d 9 16) (ones 9))
                    (tuple (ones_2d 7 9) (ones 7))))
        (inp (ones_2d 24 16)))
    (MLP wts inp))
)